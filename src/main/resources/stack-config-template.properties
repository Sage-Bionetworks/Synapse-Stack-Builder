# The database information used to create ids.
org.sagebionetworks.id.generator.database.driver=com.mysql.jdbc.Driver
org.sagebionetworks.id.generator.database.connection.url=jdbc:mysql://${id.gen.database.address}/${id.gen.database.schema}
org.sagebionetworks.id.generator.database.username=${id.gen.database.master.user}
org.sagebionetworks.id.generator.database.password=${org.sagebionetworks.id.generator.db.default.password.encrypted}

# The main MySQL database connection.
org.sagebionetworks.repository.databaes.driver=com.mysql.jdbc.Driver
org.sagebionetworks.repository.database.connection.url=jdbc:mysql://${stack.instance.database.address}/${stack.instance.database.schema}
org.sagebionetworks.repository.database.username=${stack.instance.database.master.user}
org.sagebionetworks.repository.database.password=${org.sagebionetworks.stack.instance.db.default.password.encrypted}

#This is the main bucket where all files can be found.
org.sagebionetworks.s3.bucket=${main.file.s3.bucket}

# Crowd Passwords and endpoint                                                              
org.sagebionetworks.crowdApplicationKey=${org.sagebionetworks.crowdApplicationKey.encrypted}
org.sagebionetworks.mailPW=${org.sagebionetworks.mailPW.encrypted}
# Crowd url must include protocol (http or https) and port (e.g. 8443)
org.sagebionetworks.crowd.endpoint=${crowd.endpoint}

#---- S3 configuration
# This is deprecated and should be removed.
org.sagebionetworks.s3.bucket.workflow=${stack}-deprecated

#---- Endpoint configuration overrides
org.sagebionetworks.authenticationservice.privateendpoint=${auth.service.endpoint}
org.sagebionetworks.authenticationservice.publicendpoint=${auth.service.endpoint}
org.sagebionetworks.repositoryservice.endpoint=${repo.service.endpoint}
org.sagebionetworks.fileservice.endpoint=${file.endpoint}

# Google email address for receiving Breast Cancer Challenge applications
org.sagebionetworks.bcc.approvalEmail=cancer.challenge2012@gmail.com

# a switch to disable the BCC Signup element of the Web UI
org.sagebionetworks.bcc.signup.enabled=true

# the Consumer Key and Secret were set up using Admin tools for our Google hosted domain
org.sagebionetworks.bcc.googleapps.oauth.consumer.key=sagebase.org
# encrypted
org.sagebionetworks.bcc.googleapps.oauth.consumer.secret=${org.sagebionetworks.bcc.googleapps.oauth.consumer.secret.encrypted}

# the following are generated using OAuthUtils.generateAccessToken()
# encrypted
org.sagebionetworks.bcc.googleapps.oauth.access.token=${org.sagebionetworks.bcc.googleapps.oauth.access.token.encrypted}
#encrypted
org.sagebionetworks.bcc.googleapps.oauth.access.token.secret=${org.sagebionetworks.bcc.googleapps.oauth.access.token.secret.encrypted}

# the title of the shared spreadsheet for BCC Setup
org.sagebionetworks.bcc.spreadsheet.title=BCC Registrants


# Portal LinkedIn Integration (secret in AWS stack specific configuration files)
org.sagebionetworks.portal.api.linkedin.key=${org.sagebionetworks.portal.api.linkedin.key}
# Portal Get Satisfaction Integration
org.sagebionetworks.portal.api.getsatisfaction.key=${org.sagebionetworks.portal.api.getsatisfaction.key}
#encrypted
org.sagebionetworks.portal.api.linkedin.secret=${org.sagebionetworks.portal.api.linkedin.secret.encrypted}
#encrypted
org.sagebionetworks.portal.api.getsatisfaction.secret=${org.sagebionetworks.portal.api.getsatisfaction.secret.encrypted}

#EZID
org.sagebionetworks.ezid.username=${org.sagebionetworks.ezid.username}
org.sagebionetworks.ezid.password=${org.sagebionetworks.ezid.password.encrypted}
org.sagebionetworks.ezid.doi.prefix=${org.sagebionetworks.ezid.doi.prefix}

org.sagebionetworks.repo.manager.jira.user.password=${org.sagebionetworks.repo.manager.jira.user.password.encrypted}

org.sagebionetworks.crowd.database.connection.url=${org.sagebionetworks.crowd.database.connection.url}
org.sagebionetworks.crowd.database.username=${org.sagebionetworks.crowd.database.username.encrypted}
org.sagebionetworks.crowd.database.password=${org.sagebionetworks.crowd.database.password.encrypted}
