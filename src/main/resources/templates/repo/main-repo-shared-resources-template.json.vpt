{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Creates all of the shared resources for ${stack}-${instance}.",
	"Parameters": {
		"MySQLDatabaseMasterPassword": {
			"Description": "The master password for the MySQL databases.",
			"Type": "String",
			"NoEcho": true
		},
		#parse("templates/repo/time-to-live-parameter.vpt")
	},
	"Resources": {
		"${stack}${instance}DBSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "Repository database subnet group defines where RDS instances can be deployed.",
				"SubnetIds": { "Fn::Split" : [ ",", {"Fn::ImportValue": "${vpcExportPrefix}-private-subnets-${subnetGroupColor}-Private-Subnets"} ] },
			}
		},
		"${stack}${instance}VpcDBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "VPC Security Group for ${stack}-${instance} that grants access to VPN traffic and ${subnetGroupColor} public subnets.",
				"VpcId": {
					"Fn::ImportValue": "${vpcExportPrefix}-VPCId"
				},
				"SecurityGroupIngress": [
					{
						"Description": "Allow all VPN traffic",
						"CidrIp": {
							"Fn::ImportValue": "${vpcExportPrefix}-VpnCidrNew"
						},
						"FromPort": "3306",
						"ToPort": "3306",
						"IpProtocol": "tcp"
					},
					{
						"Description": "Allow ${subnetGroupColor} subnet one access to MySQL",
						"CidrIp": {
							"Fn::ImportValue": "${vpcExportPrefix}-private-subnets-${subnetGroupColor}-CIDR"
						},
						"FromPort": "3306",
						"ToPort": "3306",
						"IpProtocol": "tcp"
					}
				],
				"Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Name",
						"Value": "${stack}${instance}VpcDatabaseSecurityGroup"
					}
				]
			}
		},
		"${stack}${instance}DBParameterGroup": {
			"Type": "AWS::RDS::DBParameterGroup",
			"Properties": {
				"Description": "Shared MySQL database parameters",
				"Family": "mysql8.0",
				"Parameters": {
					"slow_query_log": "1",
					"long_query_time": "1",
					"max_allowed_packet": "16777216",
					"log_bin_trust_function_creators": "1"
				}
			}
		},
        "${stack}${instance}RdsEnhancedMonitoringRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                   "arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2008-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": ["monitoring.rds.amazonaws.com"]
                            },
                            "Action": ["sts:AssumeRole"]
                        }
                    ]
                }
            }
        }
		#foreach( $descriptor in ${databaseDescriptors} )
		,
			"${descriptor.resourceName}": {
			"Type": "AWS::RDS::DBInstance",
			"DependsOn": [
				"${stack}${instance}DBSubnetGroup",
				"${stack}${instance}VpcDBSecurityGroup",
				"${stack}${instance}DBParameterGroup",
				"${stack}${instance}RdsEnhancedMonitoringRole"
			],
			"DeletionPolicy" : "${descriptor.deletionPolicy}",
			"Properties": {
				"AllocatedStorage": "${descriptor.allocatedStorage}",
				"AllowMajorVersionUpgrade": false,
				"AutoMinorVersionUpgrade": false,
				"BackupRetentionPeriod": ${descriptor.backupRetentionPeriodDays},
				"DBInstanceClass": "${descriptor.instanceClass}",
				"DBInstanceIdentifier": "${descriptor.instanceIdentifier}",
				#if ($descriptor.snapshotIdentifier)
				"DBSnapshotIdentifier": "${descriptor.snapshotIdentifier}",
				#else
				"DBName": "${descriptor.dbName}",
				#end
				"DBParameterGroupName": {
					"Ref": "${stack}${instance}DBParameterGroup"
				},
				"DBSubnetGroupName": {
					"Ref": "${stack}${instance}DBSubnetGroup"
				},
				"Engine": "MySQL",
				"EngineVersion": "8.0.33",
				"LicenseModel": "general-public-license",
				"MasterUsername": "${stack}${instance}user",
				"MasterUserPassword": {
					"Ref": "MySQLDatabaseMasterPassword"
				},
				"MaxAllocatedStorage": "${descriptor.maxAllocatedStorage}",
				"MultiAZ": ${descriptor.multiAZ},
				"PreferredBackupWindow": "3:00-6:00",
				"PreferredMaintenanceWindow": "Mon:07:15-Mon:07:45",
				"PubliclyAccessible": false,
				"StorageType": "${descriptor.dbStorageType}",
				#if (${descriptor.dbIops} > 0)
				"Iops": ${descriptor.dbIops},
				#end
				"VPCSecurityGroups": [
					{
						"Ref": "${stack}${instance}VpcDBSecurityGroup"
					}
				],
				"StorageEncrypted": true,
                "EnablePerformanceInsights": ${EnableRdsEnhancedMonitoring}
                #if(${EnableRdsEnhancedMonitoring} == "true")
                ,
                "MonitoringInterval": "15",
                "MonitoringRoleArn": {
                    "Fn::GetAtt" : ["${stack}${instance}RdsEnhancedMonitoringRole", "Arn"]
                }
                #end
			}
		}
		#if(${stack} == 'prod')
		,
		"${descriptor.resourceName}AlarmSwapUsage": {
			"Type" : "AWS::CloudWatch::Alarm",
			"DependsOn": [
				"${descriptor.resourceName}"
			],
			"Properties" : {
				"ActionsEnabled" : true,
				"AlarmActions" : [
					{"Fn::ImportValue": "${globalResourcesExportPrefix}-NotificationTopic"}
				],
				"AlarmDescription" : "Alert when database swap usage is exceeded.",
				"AlarmName" : "${descriptor.instanceIdentifier}-Swap-Usage",
				"ComparisonOperator" : "GreaterThanThreshold",
				"Dimensions" : [
					{
						"Name" : "DBInstanceIdentifier",
						"Value" : "${descriptor.instanceIdentifier}"
					}
				],
				"EvaluationPeriods" : 2,
				"Period" : 300,
				"MetricName" : "SwapUsage",
				"Namespace" : "AWS/RDS",
				"Statistic" : "Average",
				"Threshold" : 536870912
			}
		},
		"${descriptor.resourceName}HighWriteLatency": {
			"Type" : "AWS::CloudWatch::Alarm",
			"DependsOn": [
				"${descriptor.resourceName}"
			],
			"Properties" : {
				"ActionsEnabled" : true,
				"AlarmActions" : [
					{"Fn::ImportValue": "${globalResourcesExportPrefix}-NotificationTopic"}
				],
				"AlarmDescription" : "Alert when database write latency is exceeded.",
				"AlarmName" : "${descriptor.instanceIdentifier}-High-Write-Latency",
				"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
				"Dimensions" : [
					{
						"Name" : "DBInstanceIdentifier",
						"Value" : "${descriptor.instanceIdentifier}"
					}
				],
				"EvaluationPeriods" : 1,
				"Period" : 300,
				"MetricName" : "WriteLatency",
				"Namespace" : "AWS/RDS",
				"Statistic" : "Average",
				"Threshold" : 0.2
			}
		},
		"${descriptor.resourceName}HighCPUUtilization": {
			"Type" : "AWS::CloudWatch::Alarm",
			"DependsOn": [
				"${descriptor.resourceName}"
			],
			"Properties" : {
				"ActionsEnabled" : true,
				"AlarmActions" : [
					{"Fn::ImportValue": "${globalResourcesExportPrefix}-NotificationTopic"}
				],
				"AlarmDescription" : "Alert when database CPU utilization is exceeded.",
				"AlarmName" : "${descriptor.instanceIdentifier}-High-CPU-Utilization",
				"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
				"Dimensions" : [
					{
						"Name" : "DBInstanceIdentifier",
						"Value" : "${descriptor.instanceIdentifier}"
					}
				],
				"EvaluationPeriods" : 1,
				"Period" : 300,
				"MetricName" : "CPUUtilization",
				"Namespace" : "AWS/RDS",
				"Statistic" : "Average",
				"Threshold" : 90.0
			}
		},
		"${descriptor.resourceName}LowFreeStorageSpace": {
			"Type" : "AWS::CloudWatch::Alarm",
			"DependsOn": [
				"${descriptor.resourceName}"
			],
			"Properties" : {
				"ActionsEnabled" : true,
				"AlarmActions" : [
					{"Fn::ImportValue": "${globalResourcesExportPrefix}-NotificationTopic"}
				],
				"AlarmDescription" : "Alert when database free storage space is low.",
				"AlarmName" : "${descriptor.instanceIdentifier}-Low-Free-Storage-Space",
				"ComparisonOperator" : "LessThanOrEqualToThreshold",
				"Dimensions" : [
					{
						"Name" : "DBInstanceIdentifier",
						"Value" : "${descriptor.instanceIdentifier}"
					}
				],
				"EvaluationPeriods" : 1,
				"Period" : 300,
				"MetricName" : "FreeStorageSpace",
				"Namespace" : "AWS/RDS",
				"Statistic" : "Average",
				"Threshold" : ${descriptor.getTenPercentOfAllocatedStroageBytes()}
			}
		},
		"${descriptor.resourceName}EventsNotification": {
			"Type" : "AWS::RDS::EventSubscription",
			"DependsOn": [
				"${descriptor.resourceName}"
			],
		  	"Properties" : {
		    	"Enabled" : true,
		      	"EventCategories": [
					"availability",
		          	"configuration change",
		          	"failover",
		          	"failure",
		          	"low storage",
		          	"maintenance",
		          	"notification",
		          	"recovery",
		          	"restoration",
		          	"security patching"
		      	],
		      	"SnsTopicArn" : {
		      		"Fn::ImportValue": "${globalResourcesExportPrefix}-NotificationTopic"
		      	},
		      	"SourceIds" : [ ${descriptor.instanceIdentifier} ],
		      	"SourceType" : "db-instance",
		      	"SubscriptionName" : ${descriptor.resourceName}EventsNotification
			}
		}	
		#end
		#end
		,
		"${stack}${instance}Application": {
			"Type": "AWS::ElasticBeanstalk::Application",
			"Properties": {
				"ApplicationName": "Synapse-${stack}-${instance}",
				"Description": "Group of all Synapse-${stack}-${instance} Bean Stalk Environment"
			}
		},
		"${stack}${instance}BeanstalkSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security Group for all Bean Stalk EC2 instances in ${stack}${instance}",
                "VpcId": {
                    "Fn::ImportValue": "${vpcExportPrefix}-VPCId"
                },
				"SecurityGroupIngress": [
					{
						"Description": "Allow ${subnetGroupColor} subnet HTTPS access",
						"CidrIp": {
							"Fn::ImportValue": "${vpcExportPrefix}-private-subnets-${subnetGroupColor}-CIDR"
						},
						"FromPort": "443",
						"ToPort": "443",
						"IpProtocol": "tcp"
					}
				],
                "SecurityGroupEgress": [{
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": "-1",
                    "ToPort": "-1",
                    "IpProtocol": "-1"
                }],
                "Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Name",
						"Value": "${stack}${instance}BeanstalkSecurityGroup"
					}
				]
            }
        },
        "${stack}${instance}LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security Group for the Load Balancers of ${stack}${instance}",
                "VpcId": {
                    "Fn::ImportValue": "${vpcExportPrefix}-VPCId"
                },
				"SecurityGroupIngress": [
					{
						"Description": "Allow HTTP traffic",
						"CidrIp": "0.0.0.0/0",
						"FromPort": "80",
						"ToPort": "80",
						"IpProtocol": "tcp"
					},
					{
						"Description": "Allow HTTPS traffic",
						"CidrIp": "0.0.0.0/0",
						"FromPort": "443",
						"ToPort": "443",
						"IpProtocol": "tcp"
					},
				],
                "SecurityGroupEgress": [
                	{
						"Description": "Allow HTTP traffic",
						"CidrIp": "0.0.0.0/0",
						"FromPort": "80",
						"ToPort": "80",
						"IpProtocol": "tcp"
					},
					{
						"Description": "Allow HTTPS traffic",
						"CidrIp": "0.0.0.0/0",
						"FromPort": "443",
						"ToPort": "443",
						"IpProtocol": "tcp"
					},
                ],
                "Tags": [
					{
						"Key": "Application",
						"Value": {
							"Ref": "AWS::StackName"
						}
					},
					{
						"Key": "Name",
						"Value": "${stack}${instance}LoadBalancerSecurityGroup"
					}
				]
            }
        },
        "${stack}${instance}SynapesRepoWorkersServiceManagedPolicy": {
		    "Type": "AWS::IAM::ManagedPolicy",
		    "Properties": {
		        "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": "s3:*",
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": "sns:*",
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": "sqs:*",
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": "cloudwatch:*",
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": "cloudsearch:*",
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": "ses:*",
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "kms:Decrypt",
                                "kms:Encrypt",
                                "kms:ListAliases"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "firehose:*"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "kinesis:*"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "glue:*"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "athena:*"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:*"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": "elasticbeanstalk:*",
                            "Resource": "*"
                        }
                    ]
		        }
		    }
        },
        "${stack}${instance}SynapesRepoWorkersServiceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com",
									"ssm.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
                    {
                        "Ref": "${stack}${instance}SynapesRepoWorkersServiceManagedPolicy"
                    }
				]
			}
		},
		"${stack}${instance}SynapesRepoWorkersInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"InstanceProfileName" : "${stack}${instance}SynapesRepoWorkersInstanceProfile",
				"Path": "/",
				"Roles": [
					{
						"Ref": "${stack}${instance}SynapesRepoWorkersServiceRole"
					}
				]
			}
		},
		"${stack}${instance}SynapesPortalServiceManagedPolicy": {
		    "Type": "AWS::IAM::ManagedPolicy",
		    "Properties": {
		        "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": "s3:*",
                            "Effect": "Allow",
                            "Resource": "arn:aws:s3:::elasticbeanstalk-us-east-1*/*"
                        },
                        {
                            "Action": "logs:*",
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": "elasticbeanstalk:*",
                            "Resource": "*"
                        }
                    ]
		        }
		    }
		},
		"${stack}${instance}SynapesPortalServiceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com",
									"ssm.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
                    {
                        "Ref": "${stack}${instance}SynapesPortalServiceManagedPolicy"
                    }
				]
			}
		},
		"${stack}${instance}SynapesPortalInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"InstanceProfileName" : "${stack}${instance}SynapesPortalInstanceProfile",
				"Path": "/",
				"Roles": [
					{
						"Ref": "${stack}${instance}SynapesPortalServiceRole"
					}
				]
			}
		},
		"${stack}${instance}SynapseTempCredentialsServiceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"AWS": {
									#if(${stack} == 'dev')
										"Ref": "AWS::AccountId"
									#else
										"Fn::GetAtt" : ["${stack}${instance}SynapesRepoWorkersServiceRole", "Arn"]
									#end
								}
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"MaxSessionDuration":43200,
				"Path": "/",
				"Policies": [
					{
						"PolicyName" : "${stack}${instance}SynapseTempCredentialsService",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Action": [
										"s3:AbortMultipartUpload",
										"s3:DeleteObject",
										"s3:GetObject",
										"s3:ListBucket",
										"s3:ListMultipartUploadParts",
										"s3:ListBucketMultipartUploads"
									],
									"Effect": "Allow",
									"Resource": "*"
								},
								{
									"Action": [
										"s3:PutObject",
										"s3:PutObjectAcl"
									],
									"Effect": "Allow",
									"Resource": "*",
            						"Condition": {
                						"StringEquals": {
                    						"s3:x-amz-acl": "bucket-owner-full-control"
                						}			
            						}
								}
							]
						}
					}
				]
			}
		},
		"${stack}${instance}CMK": {
			"Type": "AWS::KMS::Key",
			"DependsOn":["${stack}${instance}SynapesRepoWorkersServiceRole"],
			"Properties": {
				"Description": "The master encryption key for ${stack}-${instance}",
				"EnableKeyRotation": true,
				"KeyPolicy": {
					"Version": "2012-10-17",
					"Id": "key-default-1",
					"Statement": [
						{
							"Sid": "This key can only be used by Root, Stack-Builder, and Synapse-Service-Role",
							"Effect": "Deny",
							"Principal": {
								"AWS": "*"
							},
							"Action": [
								"kms:*"
							],
							"Resource": "*",
							"Condition": {
								"StringNotLike": {
								    "aws:PrincipalArn": [
                                        { "Fn::Sub": "arn:aws:iam::#[[${AWS::AccountId}]]#:root" },
                                        { "Fn::ImportValue": "us-east-1-synapse-${stack}-cmk-SynapseDeploymentRoleArn"},
                                        { "Fn::Sub": "arn:aws:iam::#[[${AWS::AccountId}]]#:role/sagebase-github-oidc-sage-bionetworks-it" },
                                        { "Fn::Sub": "arn:aws:iam::#[[${AWS::AccountId}]]#:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_Administrator_6620166dd0e7f1b6" }
                                    ]
                                }
							}
						},
						{
							"Sid": "Allow root administration of the key",
							"Effect": "Allow",
							"Principal": {
								"AWS": { "Fn::Sub": "arn:aws:iam::#[[${AWS::AccountId}]]#:root" }
							},
							"Action": [
								"kms:*"
							],
							"Resource": "*"
						}
					]
				}
			}
		},
		"${stack}${instance}CMKAlias": {
			"Type": "AWS::KMS::Alias",
			"Properties": {
				"AliasName": "alias/synapse/${stack}/${instance}/cmk",
				"TargetKeyId": {
					"Ref": "${stack}${instance}CMK"
				}
			}
		}
		#parse("templates/repo/sns-and-sqs-template.json.vpt")
		#parse("templates/repo/kinesis-log-streams.json.vpt")
		#parse("templates/repo/step-functions-template.json.vpt")
		#parse("templates/repo/cloudwatch-alarms-template.json.vpt")
		#parse("templates/repo/web-acl-template.json.vpt")
	},
	"Outputs": {
		#parse("templates/repo/time-to-live-out.vpt"),
		"webAclArn": {
			"Description": "The ARN of the web ACL.",
			"Value": {
				"Fn::GetAtt" : [ "${stack}${instance}WebACL" , "Arn" ]
			},
			"Export": {
				"Name": {
					"Fn::Join": [
						"-",
						[
							{
								"Ref": "AWS::Region"
							},
							{
								"Ref": "AWS::StackName"
							},
							"Web-ACL-ARN"
						]
					]
				}
			}
		},	
		"BeanstalkApplicationId": {
			"Description": "The elastic bean stalk application ID",
			"Value": {
				"Ref": "${stack}${instance}Application"
			},
			"Export": {
				"Name": {
					"Fn::Join": [
						"-",
						[
							{
								"Ref": "AWS::Region"
							},
							{
								"Ref": "AWS::StackName"
							},
							"Beanstalk-Application-Name"
						]
					]
				}
			}
		},
		"BeanstalkSecurityGroupId": {
			"Description": "The ID of the Beanstalk security group",
			"Value": {
				"Ref": "${stack}${instance}BeanstalkSecurityGroup"
			},
			"Export": {
				"Name": {
					"Fn::Join": [
						"-",
						[
							{
								"Ref": "AWS::Region"
							},
							{
								"Ref": "AWS::StackName"
							},
							"Beanstalk-Security-Group-ID"
						]
					]
				}
			}
		},
		"LoadBalancerSecurityGroup": {
			"Description": "The ID of the Load Balancer Security Group",
			"Value": {
				"Ref": "${stack}${instance}LoadBalancerSecurityGroup"
			},
			"Export": {
				"Name": {
					"Fn::Join": [
						"-",
						[
							{
								"Ref": "AWS::Region"
							},
							{
								"Ref": "AWS::StackName"
							},
							"Load-Balancer-Security-Group-ID"
						]
					]
				}
			}
		},
		"TempCredentialsServiceRoleArn":{
			"Description": "The ARN for the IAM Role that the StsManager uses. We call AssumeRole on this ARN to generate the temporary S3 credentials that we pass to the caller.",
			"Value": {
				"Fn::GetAtt" : ["${stack}${instance}SynapseTempCredentialsServiceRole", "Arn"]
			},
			"Export": {
				"Name": {
					"Fn::Join": [
						"-",
						[
							{
								"Ref": "AWS::Region"
							},
							{
								"Ref": "AWS::StackName"
							},
							"Temp-Credentials-Service-Role-Arn"
						]
					]
				}
			}
		}
		#foreach( $descriptor in ${databaseDescriptors} )
		,
		"${descriptor.resourceName}Endpoint": {
			"Description": "The elastic bean stalk application ID",
			"Value": {
				"Fn::GetAtt": ["${descriptor.resourceName}","Endpoint.Address"]
			},
			"Export": {
				"Name": {
					"Fn::Join": [
						"-",
						[
							{
								"Ref": "AWS::Region"
							},
							{
								"Ref": "AWS::StackName"
							},
							"${descriptor.resourceName}-Endpoint"
						]
					]
				}
			}
		}
		#end
	}
}
