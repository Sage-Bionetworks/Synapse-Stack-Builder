#if( $kinesisFirehoseStreams )
	,"KinesisFirehoseLogRole":{
		"Type":"AWS::IAM::Role",
		"Properties":{
			"AssumeRolePolicyDocument":{
				"Version":"2012-10-17",
				"Statement":[
					{
						"Sid":"",
						"Effect":"Allow",
						"Principal":{
							"Service":"firehose.amazonaws.com"
						},
						"Action":"sts:AssumeRole",
						"Condition":{
							"StringEquals":{
								"sts:ExternalId":{
									"Ref":"AWS::AccountId"
								}
							}
						}
					}
				]
			},
			"Policies":[
				{
					"PolicyName":"kinesisWriteToS3Policy",
					"PolicyDocument":{
						"Version":"2012-10-17",
						"Statement":[
							{
								"Sid":"",
								"Effect":"Allow",
								"Action":[
									"s3:AbortMultipartUpload",
									"s3:GetBucketLocation",
									"s3:GetObject",
									"s3:ListBucket",
									"s3:ListBucketMultipartUploads",
									"s3:PutObject"
								],
								"Resource":[
									#foreach( $kinesisBucket in $kinesisBuckets)
									"arn:aws:s3:::$kinesisBucket",
									"arn:aws:s3:::$kinesisBucket/*"#if( $foreach.hasNext),#end
									#end
								]
							}
						]
					}
				},
				{
					"PolicyName":"kinesisReadGlueTablesPolicy",
					"PolicyDocument":{
						"Version":"2012-10-17",
						"Statement":[
							{
								"Effect":"Allow",
								"Action": [
									"glue:GetTableVersions"
								],
								"Resource":[
									"*"
								]
							}
						]
					}
				}
			]
		}
	},
	"${glueDatabaseName}GlueDatabase": {
		"Type":"AWS::Glue::Database",
		"Properties":{
			"CatalogId":{
				"Ref":"AWS::AccountId"
			},
			"DatabaseInput": {
				"Name": "${glueDatabaseName.toLowerCase()}"
			}
		}
	},
	#foreach( $stream in $kinesisFirehoseStreams)
	#if( $stream.tableDescriptor )
	"${stream.tableDescriptor.name}GlueTable": {
		"Type":"AWS::Glue::Table",
		"Properties": {
			"CatalogId": {
				"Ref":"AWS::AccountId"
			},
			"DatabaseName": {
				"Ref":"${glueDatabaseName}GlueDatabase"
			},
			"TableInput": {
				"Name": "$stream.tableDescriptor.name.toLowerCase()",
				"StorageDescriptor": {
					"Columns": [
						#foreach($column in $stream.tableDescriptor.columns)
						{
							"Name":"$column.name",
                            "Type":"$column.type"
						}
						#if( $foreach.hasNext),#end
						#end
					],
					#if ($stream.format == "PARQUET")
					"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
					"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
					"SerdeInfo": {
						"SerializationLibrary": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
						"Parameters": {
							"serialization.format": "1"
						}
					}
					#elseif( $stream.format == "JSON" )
					"InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
					"OutputFormat": "org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat",
					"SerdeInfo": {
						"SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe",
						"Parameters": {
							"serialization.format": "1"
						}
					}
					#else
					$exceptionThrower.throwException("Unsupported format: ${stream.format}")
					#end,
					"Compressed": false,
					#if ($stream.parameterizeDestinationByStack)
					"Location": "s3://${stream.bucket}/${stack}${instance}${stream.name}/records"
					#else
					"Location": "s3://${stream.bucket}/${stream.name}/records"
					#end
				},
				"PartitionKeys": [
					#foreach($partition in $stream.tableDescriptor.partitionKeys)
					{
						"Name":"$partition.name",
						"Type":"$partition.type"
					}
					#if( $foreach.hasNext),#end
					#end
				],
				#if ($stream.tableDescriptor.parameters)
				"Parameters": {
					#foreach($parameter in $stream.tableDescriptor.parameters.entrySet())
					"${parameter.key}": "${parameter.value}" #if($foreach.hasNext),#end
					#end
				},
				#end
				"TableType": "EXTERNAL_TABLE"
			}
		}
	},
	#end
	#end
	#foreach( $stream in $kinesisFirehoseStreams)
	"${stream.name}KinesisStream":{
		"Type":"AWS::KinesisFirehose::DeliveryStream",
		"Properties":{
			"DeliveryStreamName":"${stack}${instance}${stream.name}",
			"DeliveryStreamType":"DirectPut",
			"ExtendedS3DestinationConfiguration":{
				"RoleARN":{
					"Fn::GetAtt":[
						"KinesisFirehoseLogRole",
						"Arn"
					]
				},
				"BucketARN":"arn:aws:s3:::${stream.bucket}",
				#if ($stream.parameterizeDestinationByStack)
				"Prefix":"${stack}${instance}${stream.name}/records/${stream.partitionScheme}/",
				"ErrorOutputPrefix":"${stack}${instance}${stream.name}/errors/!{firehose:error-output-type}/!{timestamp:yyyy-MM-dd}/",
				#else
				"Prefix":"${stream.name}/records/${stream.partitionScheme}/",
				"ErrorOutputPrefix":"${stream.name}/errors/!{firehose:error-output-type}/!{timestamp:yyyy-MM-dd}/",
				#end
				"BufferingHints":{
					"IntervalInSeconds":#if(${stack} == 'prod') ${stream.bufferFlushInterval} #else 60 #end,
					"SizeInMBs": ${stream.bufferFlushSize}
				},
				#if( $stream.format == "PARQUET" )
					"CompressionFormat":"UNCOMPRESSED",
					"DataFormatConversionConfiguration": {
						"SchemaConfiguration": {
							"CatalogId": {
								"Ref":"AWS::AccountId"
							},
							"RoleARN":{
								"Fn::GetAtt":[
									"KinesisFirehoseLogRole",
									"Arn"
								]
							},
							"DatabaseName": {
								"Ref":"${glueDatabaseName}GlueDatabase"
							},
							"TableName": {
								"Ref":"${stream.tableDescriptor.name}GlueTable",
							},
							"Region": {
								"Ref":"AWS::Region"
							},
							"VersionId":"LATEST"
						},
						"InputFormatConfiguration":{
							"Deserializer": {
								"OpenXJsonSerDe":{}
							}
						},
						"OutputFormatConfiguration":{
							"Serializer": {
								"ParquetSerDe":{}
							}
						},
						"Enabled": true
					},
					"S3BackupMode": #if ($stream.backupDisabled) "Disabled" #else "Enabled" #end,
					"S3BackupConfiguration": {
						"RoleARN":{
							"Fn::GetAtt":[
								"KinesisFirehoseLogRole",
								"Arn"
							]
						},
						"BucketARN":"arn:aws:s3:::${stream.bucket}",
						"CompressionFormat" : "GZIP",
						#if ($stream.parameterizeDestinationByStack)
						"Prefix":"${stack}${instance}${stream.name}/backup/records/${stream.partitionScheme}/",
						"ErrorOutputPrefix":"${stack}${instance}${stream.name}/backup/errors/!{firehose:error-output-type}/!{timestamp:yyyy-MM-dd}/",
						#else
						"Prefix":"${stream.name}/backup/records/${stream.partitionScheme}/",
						"ErrorOutputPrefix":"${stream.name}/backup/errors/!{firehose:error-output-type}/!{timestamp:yyyy-MM-dd}/",
						#end
						"BufferingHints":{
							"IntervalInSeconds": ${stream.bufferFlushInterval},
							"SizeInMBs": ${stream.bufferFlushSize}
						}
					}
				#elseif( $stream.format == "JSON" )
					"CompressionFormat":"GZIP"
				#else
				$exceptionThrower.throwException("Unsupported format: ${stream.format}")
				#end
			}
		}
	}
	#if( $foreach.hasNext) , #end
	#end
#end