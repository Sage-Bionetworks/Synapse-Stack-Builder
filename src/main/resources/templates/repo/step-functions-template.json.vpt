#if( $athenaQueryDescriptors )

	## Since this is a velocity template and we need a $ for referencing the AWS functions below 
	## we set a d variable that represents the dollar sign

	#set($d = "$")
	
	## The role is used by the step functions in order to run athena and SQS and read from the glue catalog 
	,"${stack}${instance}AthenaQueryStateMachineExecutionRole": {
		"Type": "AWS::IAM::Role",
		"Properties": {
			"AssumeRolePolicyDocument": {
				"Version": "2012-10-17",
				"Statement": [
					{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"states.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}
				]
			},
			"Path": "/",
			"Policies": [
				{
					"PolicyName" : "${stack}${instance}AthenaQueryStateMachineExecutionPolicy",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [
							{
								"Effect": "Allow",
								"Action": [
						            "s3:GetBucketLocation",
						            "s3:GetObject",
						            "s3:ListBucket",
						            "s3:ListBucketMultipartUploads",
						            "s3:ListMultipartUploadParts",
						            "s3:AbortMultipartUpload",
						            "s3:CreateBucket",
						            "s3:PutObject"
						        ],
								"Resource": [
									"arn:aws:s3:::${stack}.athena-queries.sagebase.org",
									"arn:aws:s3:::${stack}.athena-queries.sagebase.org/states/*",
									"arn:aws:s3:::${stack}.filehandles.sagebase.org",
									"arn:aws:s3:::${stack}.filehandles.sagebase.org/*"
								]
							},
							{
					            "Effect": "Allow",
					            "Action": [
					                "sqs:SendMessage"
					            ],
					            "Resource": [
					            	#foreach( $query in $athenaQueryDescriptors)
					                {"Fn::GetAtt" : [ "${query.destinationQueueReferenceName}Queue" , "Arn" ]}#if( $foreach.hasNext), #end
									#end
					            ]
					        },
					        {
								"Effect": "Allow",
								"Action": [
									"athena:startQueryExecution",
						            "athena:stopQueryExecution",
						            "athena:getQueryExecution"
								],
								"Resource": "*"
							},
							{
						        "Effect": "Allow",
						        "Action": [
						            "glue:GetDatabase",
						            "glue:GetDatabases",
						            "glue:GetTable",
						            "glue:GetTables",
						            "glue:GetPartition",
						            "glue:GetPartitions",
						            "glue:BatchGetPartition"
						        ],
						        "Resource": "*"
						    }
						]
					}
				}
			]
		}
	},

	## Since this is a velocity template and we need a $$ for referencing the global context below 
	## we set a dd variable that represents the double dollar

	#set($dd = "$$") 
	#foreach( $query in $athenaQueryDescriptors)
	"${stack}${instance}${query.queryName}QueryStateMachine": {
	    "Type": "AWS::StepFunctions::StateMachine",
	    "Properties": {
	     	"RoleArn": {
	            "Fn::GetAtt": [ "${stack}${instance}AthenaQueryStateMachineExecutionRole", "Arn" ]
	        },
	        "Definition": {
	        	"StartAt": "Submit Query",
	        	"States": {
	        		"Submit Query": {
	        			"Type": "Task",
	        			"Resource": "arn:aws:states:::athena:startQueryExecution.sync",
					    "Parameters": {
					       "QueryString": "${query.queryString}",
					       "QueryExecutionContext": {
					       		"Database": "${stack}${instance}${query.database}"
					       },
					       "WorkGroup": "primary",
					       "ResultConfiguration": {
					       		"OutputLocation.$": "States.Format('s3://${stack}.athena-queries.sagebase.org/states/{}', ${dd}.Execution.Id)"
					       }
					    },
					    "Next": "Publish Query Results"
	        		},
	        		"Publish Query Results": {
	        			 "Type":"Task",
				         "Resource":"arn:aws:states:::sqs:sendMessage",
				         "Parameters":{  
				            "QueueUrl": {
				            	"Ref": "${query.destinationQueueReferenceName}Queue"
				            },
				            "MessageBody":{
				               "QueryName": "${query.queryName}",
				               "FunctionExecutionId.$": "${dd}.Execution.Id",
				               "QueryExecution.$": "$.QueryExecution"
				            }
				         },
				         "End": true
	        		}
	        	}
	        }
	    }
	}
	#if( $foreach.hasNext), #end
	#end
#end
