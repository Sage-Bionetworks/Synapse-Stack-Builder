{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Template used to create glue ETL job",
	"Resources": {
		"AWSGlueJobRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"glue.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"Path": "/",
				"Policies": [{
						"PolicyName": "Glue",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [{
								"Effect": "Allow",
								"Action": [
									"glue:*",
									"cloudwatch:PutMetricData"
								],
								"Resource": "*"
							}]
						}
					},
					{
						"PolicyName": "IAM",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [{
								"Effect": "Allow",
								"Action": [
									"iam:ListRolePolicies",
									"iam:GetRole",
									"iam:GetRolePolicy"
								],
								"Resource": "*"
							}]
						}
					},
					{
						"PolicyName": "ReadWriteS3",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [{
								"Effect": "Allow",
								"Action": [
									"s3:AbortMultipartUpload",
									"s3:GetBucketLocation",
									"s3:GetObject",
									"s3:ListBucket",
									"s3:ListBucketMultipartUploads",
									"s3:PutObject"
								],
								"Resource":[
                                	"arn:aws:s3:::${stack}.log.sagebase.org",
                                    "arn:aws:s3:::${stack}.log.sagebase.org/*",
                                    "arn:aws:s3:::${stack}.aws-glue.sagebase.org",
                                    "arn:aws:s3:::${stack}.aws-glue.sagebase.org/*",
                                ]
							}]
						}
					},
					{
						"PolicyName": "Log",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [{
								"Effect": "Allow",
								"Action": [
									"logs:CreateLogGroup",
									"logs:CreateLogStream",
									"logs:PutLogEvents"
								],
								"Resource": [
									"arn:aws:logs:*:*:/aws-glue/*"
								]
							}]
						}
					}
				]
			}
		},
		"${glueDatabaseName}GlueDatabase": {
            "Type":"AWS::Glue::Database",
            "Properties":{
                "CatalogId":{
                    "Ref":"AWS::AccountId"
                },
                "DatabaseInput": {
                    "Name": "${glueDatabaseName.toLowerCase()}"
                }
            }
        },
		#foreach( $etl in $etlDescriptors)
		"${etl.name}GlueJob": {
			"Type": "AWS::Glue::Job",
			"Properties": {
				"Command": {
					"Name": "glueetl",
					"ScriptLocation": "s3://${stack}.${etl.scriptLocation}"
				},
				"DefaultArguments": {
				    "--enable-continuous-cloudwatch-log": "true",
					"--job-bookmark-option": "job-bookmark-enable",
					"--enable-metrics": "true",
                    "--enable-spark-ui": "true",
					"--job-language": "python",
					"--DESTINATION_FILE_FORMAT": "${etl.destinationFileFormat}",
					"--S3_DESTINATION_PATH": "s3://${stack}.${etl.destinationPath}",
					"--S3_SOURCE_PATH": "s3://${stack}.${etl.sourcePath}"
				},
				"Description": "${etl.description}",
				"GlueVersion": "3.0",
				"Name": "${etl.name}",
				"Role": {
				    "Fn::GetAtt":[
                        "AWSGlueJobRole",
                        "Arn"
                    ]
                }
			}
		},
        #if( $etl.tableDescriptor )
        "${etl.tableDescriptor.name}GlueTable": {
            "Type":"AWS::Glue::Table",
            "Properties": {
                "CatalogId": {
                    "Ref":"AWS::AccountId"
                },
                "DatabaseName": {
                    "Ref":"${glueDatabaseName}GlueDatabase"
                },
                "TableInput": {
                    "Name": "$etl.tableDescriptor.name.toLowerCase()",
                    "StorageDescriptor": {
                        "Columns": [
                            #foreach($column in $etl.tableDescriptor.columns.entrySet())
                            {
                                "Name":"${column.key}",
                                "Type":"${column.value}"
                            }
                            #if( $foreach.hasNext),#end
                            #end
                        ],
                        #if ($etl.destinationFileFormat == "PARQUET")
                        "InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
                        "OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
                            "Parameters": {
                                "serialization.format": "1"
                            }
                        }
                        #elseif( $etl.destinationFileFormat == "json" )
                        "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
                        "OutputFormat": "org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat",
                        "SerdeInfo": {
                            "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe",
                            "Parameters": {
                                "serialization.format": "1"
                            }
                        }
                        #else
                        $exceptionThrower.throwException("Unsupported format: ${etl.destinationFileFormat}")
                        #end,
                        "Compressed": false,
                        "Location": "s3://${stack}.${etl.destinationPath}"
                    },
                    "PartitionKeys": [
                        #foreach($partition in $etl.tableDescriptor.partitionKeys.entrySet())
                        {
                            "Name":"${partition.key}",
                            "Type":"${partition.value}"
                        }
                        #if( $foreach.hasNext),#end
                        #end
                    ],
                    #if ($etl.tableDescriptor.parameters)
                    "Parameters": {
                        #foreach($parameter in $etl.tableDescriptor.parameters.entrySet())
                        "${parameter.key}": "${parameter.value}" #if($foreach.hasNext),#end
                        #end
                    },
                    #end
                    "TableType": "EXTERNAL_TABLE"
                }
            }
        },
        #end
        "${etl.name}GlueJobTrigger": {
            "Type" : "AWS::Glue::Trigger",
            "Properties" : {
            "Type": "SCHEDULED",
            "StartOnCreation": "true",
            "Description" : "Trigger for job ${etl.name}",
             "Name" : "${etl.name}Trigger",
             "Schedule" : "cron(0 * * * ? *)",
            "Actions" : [
                {
                     "JobName" : "${etl.name}"
                 }
             ]
            }
        },
		#end
	}
}