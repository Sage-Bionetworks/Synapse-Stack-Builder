{
	"githubRepo": "Synapse-ETL-Jobs",
	"version": "1.30.0",
	"extraScripts": ["utils.py"],
	"etlJobDescriptors":[{
		"name": "processaccessrecord",
		"description": "This job processes the access records",
		"scriptName": "process_access_record.py",
		"sourcePath" : "log.sagebase.org/accessRecord/",
		"tableDescriptor": {
			"name": "processedaccessrecord",
			"description" : "The table contains access records. Each record reflects a single API request received by the Synapse server. The recorded data is useful for audits and to analyse API performance such as delays, errors or success rates.",
			"columns":[{
				"name": "session_id",
				"type" : "string",
				"comment" : "A unique identifier that Synapse assigns for the duration of a session. Sessions are linked to a user, an API key or a token."
			},
			{
				"name": "timestamp",
				"type" : "timestamp",
				"comment" : "The timestamp when the user sends a request to the Synapse server."
			},
			{
				"name": "user_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the Synapse user."
			},
			{
				"name": "method",
				"type" : "string",
				"comment" : "The http method of the API call."
			},
			{
				"name": "request_url",
				"type" : "string",
				"comment" : "The URL of the request."
			},
			{
				"name": "user_agent",
				"type" : "string",
				"comment" : "The User-Agent header from the http request. See: https://en.wikipedia.org/wiki/User-Agent_header"
			},
			{
				"name": "host",
				"type" : "string",
				"comment" : "The IP address of the host that made the request."
			},
			{
				"name": "origin",
				"type" : "string",
				"comment" : "The host name of the portal making request, e.g., https://staging.synapse.org, https://adknowledgeportal.synapse.org, https://dhealth.synapse.org."
			},
			{
				"name": "x_forwarded_for",
				"type" : "string",
				"comment" : "The HTTP Header contains the IP address of the user connecting through a proxy. See: https://en.wikipedia.org/wiki/X-Forwarded-For"
			},
			{
				"name": "via",
				"type" : "string",
				"comment" : "The HTTP Header Via, informs the server of proxies through which the request was sent."
			},
			{
				"name": "thread_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the thread in which the request was processed."
			},
			{
				"name": "elapse_ms",
				"type" : "bigint",
				"comment" : "The total time of processing the user request in milliseconds."
			},
			{
				"name": "success",
				"type" : "boolean",
				"comment" : "Indicates if the user request succeeded (true) or failed (false)."
			},
			{
				"name": "stack",
				"type" : "string",
				"comment" : "The stack (prod, dev) on which request was made."
			},
			{
				"name": "instance",
				"type" : "string",
				"comment" : "The version of the stack that processed the request."
			},
			{
				"name": "vm_id",
				"type" : "string",
				"comment" : "The unique identifier of the Synapse ec2 server in the cluster that processed the request."
			},
			{
				"name": "return_object_id",
				"type" : "string",
				"comment" : "The Synapse object identifier which is returned to the user in response body of a GET, PUT or POST API, if available."
			},
			{
				"name": "query_string",
				"type" : "string",
				"comment" : "The set of characters tacked onto the end of a URL after the question mark (?)."
			},
			{
				"name": "response_status",
				"type" : "bigint",
				"comment" : "The response code for the request, e.g., 200, 401, 500. See: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"
			},
			{
				"name": "oauth_client_id",
				"type" : "string",
				"comment" : "The unique identifier of the oauth client used in the request. It will be empty when the request is not made by OAuth client."
			},
			{
				"name": "basic_auth_username",
				"type" : "string",
				"comment" : "The name of the user who made the request using BASIC authentication method. It will be empty otherwise."
			},
			{
				"name": "auth_method",
				"type" : "string",
				"comment" : "The authentication method used by the client. Currently BEARERTOKEN, SESSIONTOKEN, BASIC, APIKEY methods are supported."
			},
			{
				"name": "normalized_method_signature",
				"type" : "string",
				"comment" : "This is calculated field from method and request_url filed to get a simplified version of the request url (the http method and the request url with all IDs extracted)."
			},
			{
				"name": "client",
				"type" : "string",
				"comment" : "The is an alias of the user agent, e.g., WEB, JAVA, PYTHON."
			},
			{
				"name": "client_version",
				"type" : "string",
				"comment" : "The version of the client used to make the request."
			},
			{
				"name": "entity_id",
				"type" : "bigint",
				"comment" : "The Synapse object identifier sent by the user in the request url, if any."
			}],
			"partitionKeys":[{
				"name": "record_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The timestamp filed is converted into a date and stored in the record_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.record_date.type": "date",
				"projection.record_date.range": "NOW-11YEARS,NOW",
				"projection.record_date.format": "yyyy-MM-dd"
			}
		}
	},
	{
		"name": "nodesnapshots",
		"description": "This job processes the node snapshot data",
		"scriptName": "node_snapshots.py",
		"sourcePath" : "log.sagebase.org/nodeSnapshots/",
		"tableDescriptor": {
			"name": "nodesnapshots",
			"description" : "This table contain snapshots of nodes (Nodes are project, file, folders...). Snapshots are taken when nodes are created, updated or deleted. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp is the time when the snapshot was taken.",
			"columns":[{
				"name": "change_type",
				"type" : "string",
				"comment" : "The type of change that occurred on the node, e.g., CREATE, UPDATE, DELETE."
			},
			{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the change (created/updated/deleted) on the node is pushed to the queue for snapshotting."
			},
			{
				"name": "change_user_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who made the change to the node."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The timestamp when the snapshot was taken. (It is usually after the change happened)."
			},
			{
				"name": "id",
				"type" : "bigint",
				"comment" : "The unique identifier of the node."
			},
			{
				"name": "benefactor_id",
				"type" : "bigint",
				"comment" : "The identifier of the (ancestor) node which provides the permissions that apply to this node. Can be the id of the node itself."
			},
			{
				"name": "project_id",
				"type" : "bigint",
				"comment" : "The project where the node resides. It will be empty for the change type DELETE."
			},
			{
				"name": "parent_id",
				"type" : "bigint",
				"comment" : "The identifier of the parent in the node hierarchy."
			},
			{
				"name": "node_type",
				"type" : "string",
				"comment" : "The type of node. Allowed node types are : project, folder, file, table, link, entityview, dockerrepo, submissionview, dataset, datasetcollection, materializedview, virtualtable."
			},
			{
				"name": "created_on",
				"type" : "timestamp",
				"comment" : "The creation timestamp of the node."
			},
			{
				"name": "created_by",
				"type" : "bigint",
				"comment" : "The identifier of the user who created the node."
			},
			{
				"name": "modified_on",
				"type" : "timestamp",
				"comment" : "The most recent change timestamp of the node."
			},
			{
				"name": "modified_by",
				"type" : "bigint",
				"comment" : "The identifier of the user who last modified the node."
			},
			{
				"name": "version_number",
				"type" : "bigint",
				"comment" : "The version of the node on which the change occurred, if applicable."
			},
			{
				"name": "file_handle_id",
				"type" : "bigint",
				"comment" : "The identifier of the file handle if the node is a file, null otherwise."
			},
			{
				"name": "name",
				"type" : "string",
				"comment" : "The name of the node."
			},
			{
				"name": "is_public",
				"type" : "boolean",
				"comment" : "If true, READ permission is granted to all the Synapse users, including the anonymous user, at the time of the snapshot."
			},
			{
				"name": "is_controlled",
				"type" : "boolean",
				"comment" : "If true, an access requirement managed by the ACT on the node."
			},
			{
				"name": "is_restricted",
				"type" : "boolean",
				"comment" : "If true, a terms-of-use access requirement is set on the node."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp filed is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-10YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		}
	},
	{
		"name": "filesnapshots",
		"description": "This job processes the file snapshot data",
		"scriptName": "file_snapshots.py",
		"sourcePath" : "log.sagebase.org/fileSnapshots/",
		"tableDescriptor": {
			"name": "filesnapshots",
			"description" : "This table contain snapshots of file handles. Snapshots are taken when file handles are created, updated or deleted. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",
			"columns":[{
				"name": "change_type",
				"type" : "string",
				"comment" : "The type of change that occurred on the file handle, e.g., CREATE, UPDATE, DELETE."
			},
			{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the change (created/updated/deleted) on the file is pushed to the queue for snapshotting."
			},
			{
				"name": "change_user_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who made the change to the file."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
			},
			{
				"name": "id",
				"type" : "bigint",
				"comment" : "The identifier of the file handle."
			},
			{
				"name": "created_by",
				"type" : "bigint",
				"comment" : "The identifier of the user who created the file handle."
			},
			{
				"name": "created_on",
				"type" : "timestamp",
				"comment" : "The creation timestamp of the file handle."
			},
			{
				"name": "modified_on",
				"type" : "timestamp",
				"comment" : "The most recent change timestamp of the file handle."
			},
			{
				"name": "concrete_type",
				"type" : "string",
				"comment" : "The type of the file handle. Allowed file handles are : S3FileHandle, ProxyFileHandle, ExternalFileHandle, ExternalObjectStoreFileHandle, GoogleCloudFileHandle."
			},
			{
				"name": "content_md5",
				"type" : "string",
				"comment" : "The md5 hash (using MD5 algorithm) of the file referenced by the file handle."
			},
			{
				"name": "content_type",
				"type" : "string",
				"comment" : "It's meta data about the content of the file e.g., application/json, application/zip, application/octet-stream."
			},
			{
				"name": "file_name",
				"type" : "string",
				"comment" : "The name of the file referenced by the file handle."
			},
			{
				"name": "storage_location_id",
				"type" : "bigint",
				"comment" : "The identifier of the environment where the physical files are stored."
			},
			{
				"name": "content_size",
				"type" : "bigint",
				"comment" : "The size of the file referenced by the file handle."
			},
			{
				"name": "bucket",
				"type" : "string",
				"comment" : "The bucket where the file is physically stored. Applicable for s3 and GCP otherwise empty"
			},
			{
				"name": "key",
				"type" : "string",
				"comment" : "The key name uniquely identifies the object (file) in the bucket."
			},
			{
				"name": "preview_id",
				"type" : "bigint",
				"comment" : "The identifier of the file handle that contains a preview of the file referenced by this file handle."
			},
			{
				"name": "is_preview",
				"type" : "boolean",
				"comment" : "If true, the file referenced by this file handle is a preview of another file"
			},
			{
				"name": "status",
				"type" : "string",
				"comment" : "The availability status of the file referenced by the file handle."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp filed is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-10YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		}
	},
	{
		"name": "teamsnapshots",
		"description": "This job processes the team snapshot data",
		"scriptName": "team_snapshots.py",
		"sourcePath" : "log.sagebase.org/teamSnapshots/",
		"tableDescriptor": {
			"name": "teamsnapshots",
			"description" : "This table contain snapshots of teams. Snapshots are taken when teams are created, updated or deleted. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",

			"columns":[{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the change (created/updated/deleted) on team is pushed to the queue for snapshotting."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (it is usually after the change happened)."
			},
			{
				"name": "id",
				"type" : "bigint",
				"comment" : "The unique identifier of the team."
			},
			{
				"name": "name",
				"type" : "string",
				"comment" : "The name of the team."
			},
			{
				"name": "can_public_join",
				"type" : "boolean",
				"comment" : "If true, a user can join the team without approval of a team manager."
			},
			{
				"name": "created_on",
				"type" : "timestamp",
				"comment" : "The creation timestamp of the team."
			},
			{
				"name": "created_by",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who created the team."
			},
			{
				"name": "modified_on",
				"type" : "timestamp",
				"comment" : "The timestamp when the team was last modified."
			},
			{
				"name": "modified_by",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who last modified the team."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp filed is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-10YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		}
	},
	{
		"name": "teammembersnapshots",
		"description": "This job processes the team member snapshot data",
		"scriptName": "team_member_snapshots.py",
		"sourcePath" : "log.sagebase.org/teamMemberSnapshots/",
		"tableDescriptor": {
			"name": "teammembersnapshots",
			"description" : "This table contain snapshots of team-members. Snapshots are taken when members are added or deleted from a team. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",
			"columns":[{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when a user was added to or deleted from the team."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
			},
			{
				"name": "team_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the team."
			},
			{
				"name": "member_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the member of the team. The member is a Synapse user."
			},
			{
				"name": "is_admin",
				"type" : "boolean",
				"comment" : "If true, then the member is manager of the team."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp filed is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-10YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		}
	},
	{
		"name": "usergroupsnapshots",
		"description": "This job processes the user group snapshot data",
		"scriptName": "user_group_snapshots.py",
		"sourcePath" : "log.sagebase.org/userGroupSnapshots/",
		"tableDescriptor": {
			"name": "usergroupsnapshots",
			"description" : "This table lists all principals (individual users and groups of users). (A group is the low-level object underlying a team, much like a file handle is the low-level object underlying a file entity.) In addition to explicit users and teams, principals in Synapse include the anonymous user, the implicit group of all authenticated users, and the implicit public group which includes all users, authenticated or not. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",
			"columns":[{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the change (created/updated/deleted) on user-group is pushed to the queue for snapshotting."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
			},
			{
				"name": "id",
				"type" : "bigint",
				"comment" : "The unique identifier of user or group."
			},
			{
				"name": "is_individual",
				"type" : "boolean",
				"comment" : "If true, then this user group an is individual user not a team."
			},
			{
				"name": "created_on",
				"type" : "timestamp",
				"comment" : "The creation timestamp of the user-group."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp filed is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-10YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		}
	},
	{
		"name": "userprofilesnapshots",
		"description": "This job processes the user profile snapshot data",
		"scriptName": "user_profile_snapshots.py",
		"sourcePath" : "log.sagebase.org/userProfileSnapshots/",
		"tableDescriptor": {
			"name": "userprofilesnapshots",
			"description" : "This table contain snapshots of user-profiles. Snapshots are taken when user-profiles are created, updated or deleted. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",
			"columns":[{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the change (created/updated/deleted) on user profile is pushed to the queue for snapshotting."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
			},
			{
				"name": "id",
				"type" : "bigint",
				"comment" : "The unique identifier of the user."
			},
			{
				"name": "user_name",
				"type" : "string",
				"comment" : "The Synapse username."
			},
			{
				"name": "first_name",
				"type" : "string",
				"comment" : "The first name of the user."
			},
			{
				"name": "last_name",
				"type" : "string",
				"comment" : "The last name of the user."
			},
			{
				"name": "email",
				"type" : "string",
				"comment" : "The primary email of the user."
			},
			{
				"name": "location",
				"type" : "string",
				"comment" : "The location of the user."
			},
			{
				"name": "company",
				"type" : "string",
				"comment" : "The company where the user works."
			},
			{
				"name": "position",
				"type" : "string",
				"comment" : "The position of the user in the company."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp filed is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-10YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		}
	},
	{
		"name": "fileuploadrecords",
		"description": "This job processes the file upload records",
		"scriptName": "file_upload_records.py",
		"sourcePath" : "log.sagebase.org/fileUploadRecords/",
		"tableDescriptor": {
			"name": "fileuploadrecords",
			"description" : "The table contain upload records for FileEntity and TableEntity. The events are recorded only after the file or table is successfully uploaded.",
			"columns":[{
				"name": "timestamp",
				"type" : "timestamp",
				"comment" : "The time when the file upload event is pushed to the queue, after upload of a file."
			},
			{
				"name": "user_id",
				"type" : "bigint",
				"comment" : "The id of the user who uploaded the file."
			},
			{
				"name": "project_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the project where the uploaded entity resides. Applicable only for FileEntity and TableEntity."
			},
			{
				"name": "file_handle_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the file handle."
			},
			{
				"name": "association_object_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the Synapse object (without 'syn' prefix) that wraps the file."
			},
			{
				"name": "association_object_type",
				"type" : "string",
				"comment" : "The type of the Synapse object that wraps the file, e.g, FileEntity, TableEntity."
			},
			{
				"name": "stack",
				"type" : "string",
				"comment" : "The stack (prod, dev) on which the file was uploaded."
			},
			{
				"name": "instance",
				"type" : "string",
				"comment" : "The version of the stack that processed the file upload."
			}],
			"partitionKeys":[{
				"name": "record_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The timestamp filed is converted into a date and stored in the record_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.record_date.type": "date",
				"projection.record_date.range": "NOW-5YEARS,NOW",
				"projection.record_date.format": "yyyy-MM-dd"
			}
		}
	},
	{
		"name": "filedownloadrecords",
		"description": "This job processes the file download records",
		"scriptName": "file_download_records.py",
		"sourcePath" : "log.sagebase.org/fileDownloadRecords/",
		"tableDescriptor": {
			"name": "filedownloadrecords",
			"description" : "The table contain records of all downloads of the Synapse. The events are recorded only after the pre-signed url for requested download entity is generated.",
			"columns":[{
				"name": "timestamp",
				"type" : "timestamp",
				"comment" : "The time when the file download event is pushed to the queue for recording, after generating the Pre-signed url."
			},
			{
				"name": "user_id",
				"type" : "bigint",
				"comment" : "The id of the user who downloaded the file."
			},
			{
				"name": "project_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the project where the downloaded entity resides. Applicable only for FileEntity and TableEntity."
			},
			{
				"name": "file_handle_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the file handle."
			},
			{
				"name": "downloaded_file_handle_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the file handle of a zip file when the download is requested as zip/package otherwise file_handle_id is downloaded_file_handle_id."
			},
			{
				"name": "association_object_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the Synapse object (without 'syn' prefix) that wraps the file."
			},
			{
				"name": "association_object_type",
				"type" : "string",
				"comment" : "The type of the Synapse object that wraps the file, e.g, FileEntity, TableEntity, WikiAttachment, WikiMarkdown, UserProfileAttachment, MessageAttachment, TeamAttachment."
			},
			{
				"name": "stack",
				"type" : "string",
				"comment" : "The stack (prod, dev) on which the file was downloaded."
			},
			{
				"name": "instance",
				"type" : "string",
				"comment" : "The version of the stack that processed the file download."
			}],
			"partitionKeys":[{
				"name": "record_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The timestamp filed is converted into a date and stored in the record_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.record_date.type": "date",
				"projection.record_date.range": "NOW-5YEARS,NOW",
				"projection.record_date.format": "yyyy-MM-dd"
			}
		}
	},
	{
		"name": "aclsnapshots",
		"description": "This job processes the acl snapshot data",
		"scriptName": "acl_snapshots.py",
		"sourcePath" : "log.sagebase.org/aclSnapshots/",
		"tableDescriptor": {
			"name": "aclsnapshots",
			"description" : "This table contain snapshots of access-control-list. Snapshots are taken when acl is created, updated or deleted. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",
			"columns":[{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the change (created/updated/deleted) on acl is pushed to the queue for snapshotting."
			},
			{
				"name": "change_type",
				"type" : "string",
				"comment" : "The type of changed that occurred on acl, e.g., CREATE, UPDATE, DELETE."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
			},
			{
				"name": "owner_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the Synapse object to which the acl is applied."
			},
			{
				"name": "owner_type",
				"type" : "string",
				"comment" : "The type of the Synapse object that the acl is affecting, .e.g., ENTITY, FILE, SUBMISSION, MESSAGE, TEAM."
			},
			{
				"name": "created_on",
				"type" : "timestamp",
				"comment" : "The creation time of the acl."
			},
			{
				"name": "resource_access",
				"type" : "array<struct<principalId:bigint,accessType:array<string>>>",
				"comment" : "The list of principal (user or team) along with the permissions the principal is granted on the object to which the acl is applied."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp filed is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-6YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		}
	},
	{
		"name": "verificationsubmissionsnapshots",
		"description": "This job processes the verification submission snapshot data",
		"scriptName": "verification_submission_snapshots.py",
		"sourcePath" : "log.sagebase.org/verificationSubmissionSnapshots/",
		"tableDescriptor": {
			"name": "verificationsubmissionsnapshots",
			"description" : "This table contain snapshots of submissions of user verification data by ACT. Snapshots are taken when submission is created or updated. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",
			"columns":[{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the change (created/updated) on submission is pushed to the queue for snapshotting."
			},
			{
				"name": "change_type",
				"type" : "string",
				"comment" : "The type of change that occurred on the submission, e.g., CREATE, UPDATE."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
			},
			{
				"name": "id",
				"type" : "bigint",
				"comment" : "The unique identifier of the submission."
			},
			{
				"name": "created_on",
				"type" : "timestamp",
				"comment" : "The creation timestamp of the submission."
			},
			{
				"name": "created_by",
				"type" : "bigint",
				"comment" : "The identifier of the user who created the submission"
			},
			{
				"name": "state_history",
				"type" : "array<struct<createdOn:bigint,createdBy:string,state:string>>",
				"comment" : "List of submission states (SUBMITTED, REJECTED, APPROVED) for the submission."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp filed is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-6YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		}
	},
	{
		"name": "certifiedquizrecords",
		"description": "This job processes the user's certified quiz records",
		"scriptName": "certified_quiz_records.py",
		"sourcePath" : "log.sagebase.org/certifiedUserPassingRecords/",
		"tableDescriptor": {
			"name": "certifiedquizrecords",
			"description" : "This table contain records of the certification quiz taken by a Synapse user.",
			"columns":[{
				"name": "response_id",
				"type" : "bigint",
				"comment" : "The unique identifier for the instance of a quiz taken by user."
			},
			{
				"name": "user_id",
				"type" : "bigint",
				"comment" : "The identifier of the user who took the quiz."
			},
			{
				"name": "passed",
				"type" : "boolean",
				"comment" : "If true, user passed the quiz."
			},
			{
				"name": "passed_on",
				"type" : "timestamp",
				"comment" : "The date on which the user took or passed the quiz."
			},
			{
				"name": "stack",
				"type" : "string",
				"comment" : "The stack (prod, dev) on which the quiz record was processed."
			},
			{
				"name": "instance",
				"type" : "string",
				"comment" : "The version of the stack that processed the quiz record."
			}],
			"partitionKeys":[{
				"name": "record_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The timestamp when the quiz was taken converted into a date and stored in the record_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.record_date.type": "date",
				"projection.record_date.range": "NOW-6YEARS,NOW",
				"projection.record_date.format": "yyyy-MM-dd"
			}
		}
	},
	{
		"name": "certifiedquizquestionrecords",
		"description": "This job processes the user's certified quiz question records",
		"scriptName": "certified_quiz_question_records.py",
		"sourcePath" : "log.sagebase.org/certifiedUserPassingRecords/",
		"tableDescriptor": {
			"name": "certifiedquizquestionrecords",
			"description" : "This table contain records of the questions of the certification quiz. Each record in the table is question attempted by the user in the quiz.",
			"columns":[{
				"name": "response_id",
				"type" : "bigint",
				"comment" : "The identifier of the certification quiz taken by the user."
			},
			{
				"name": "question_index",
				"type" : "bigint",
				"comment" : "The position of the question within the quiz."
			},
			{
				"name": "is_correct",
				"type" : "boolean",
				"comment" : "If true, the answer to the question was correct."
			},
			{
				"name": "stack",
				"type" : "string",
				"comment" : "The stack (prod, dev) on which the quiz question record was processed."
			},
			{
				"name": "instance",
				"type" : "string",
				"comment" : "The version of the stack that processed the quiz question record."
			}],
			"partitionKeys":[{
				"name": "record_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The timestamp when the quiz was taken converted into a date and stored in the record_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.record_date.type": "date",
				"projection.record_date.range": "NOW-6YEARS,NOW",
				"projection.record_date.format": "yyyy-MM-dd"
			}
		}
	}]
}