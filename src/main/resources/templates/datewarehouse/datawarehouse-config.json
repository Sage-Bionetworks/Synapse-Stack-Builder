{
	"githubRepo": "Synapse-ETL-Jobs",
	"version": "1.57.0",
	"extraScripts": ["utils.py","glue_job.py"],
	"tableDescriptors": [{
			"name": "processedaccessrecord",
			"description" : "The table contains access records. Each record reflects a single API request received by the Synapse server. The recorded data is useful for audits and to analyse API performance such as delays, errors or success rates.",
			"columns":[{
				"name": "session_id",
				"type" : "string",
				"comment" : "A unique identifier that the Synapse server assigns for the duration of a session. Sessions are linked to a user, an API key or a token."
			},
			{
				"name": "timestamp",
				"type" : "timestamp",
				"comment" : "The timestamp when the user sends a request to the Synapse server."
			},
			{
				"name": "user_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the Synapse user."
			},
			{
				"name": "method",
				"type" : "string",
				"comment" : "The http method of the request."
			},
			{
				"name": "request_url",
				"type" : "string",
				"comment" : "The URL of the request."
			},
			{
				"name": "user_agent",
				"type" : "string",
				"comment" : "The User-Agent header from the http request. See: https://en.wikipedia.org/wiki/User-Agent_header"
			},
			{
				"name": "host",
				"type" : "string",
				"comment" : "The IP address of the host that made the request."
			},
			{
				"name": "origin",
				"type" : "string",
				"comment" : "The host name of the portal making the request, e.g., https://staging.synapse.org, https://adknowledgeportal.synapse.org, https://dhealth.synapse.org."
			},
			{
				"name": "x_forwarded_for",
				"type" : "string",
				"comment" : "The HTTP header x_forwarded_for contains the IP address of the user connecting through a proxy. See: https://en.wikipedia.org/wiki/X-Forwarded-For"
			},
			{
				"name": "via",
				"type" : "string",
				"comment" : "The HTTP header Via, informs the server of proxies through which the request was sent."
			},
			{
				"name": "thread_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the thread in which the request was processed."
			},
			{
				"name": "elapse_ms",
				"type" : "bigint",
				"comment" : "The total time of processing the user request in milliseconds."
			},
			{
				"name": "success",
				"type" : "boolean",
				"comment" : "Indicates if the user request succeeded (true) or failed (false)."
			},
			{
				"name": "stack",
				"type" : "string",
				"comment" : "The stack (prod, dev) on which the request was processed."
			},
			{
				"name": "instance",
				"type" : "string",
				"comment" : "The version of the stack that processed the request."
			},
			{
				"name": "vm_id",
				"type" : "string",
				"comment" : "The unique identifier of the Synapse ec2 server in the cluster that processed the request."
			},
			{
				"name": "return_object_id",
				"type" : "string",
				"comment" : "The Synapse object identifier which is returned to the user in response body of a GET, PUT or POST API, if available."
			},
			{
				"name": "query_string",
				"type" : "string",
				"comment" : "The set of characters tacked onto the end of a URL after the question mark (?)."
			},
			{
				"name": "response_status",
				"type" : "bigint",
				"comment" : "The response code for the request, e.g., 200, 401, 500. See: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"
			},
			{
				"name": "oauth_client_id",
				"type" : "string",
				"comment" : "The unique identifier of the oauth client used in the request. It will be empty when the request is not made by an OAuth client."
			},
			{
				"name": "basic_auth_username",
				"type" : "string",
				"comment" : "The name of the user who made the request using BASIC authentication method. It will be empty otherwise."
			},
			{
				"name": "auth_method",
				"type" : "string",
				"comment" : "The authentication method used by the client. Currently BEARERTOKEN, SESSIONTOKEN, BASIC, APIKEY methods are supported."
			},
			{
				"name": "normalized_method_signature",
				"type" : "string",
				"comment" : "This is the http method followed by a simplified version of the request url (with all IDs extracted)."
			},
			{
				"name": "client",
				"type" : "string",
				"comment" : "The is an alias of the user agent, e.g., WEB, JAVA, PYTHON."
			},
			{
				"name": "client_version",
				"type" : "string",
				"comment" : "The version of the client used to make the request."
			},
			{
				"name": "entity_id",
				"type" : "bigint",
				"comment" : "The Synapse object identifier sent by the user in the request url, if any."
			}],
			"partitionKeys":[{
				"name": "record_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The timestamp field is converted into a date and stored in the record_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.record_date.type": "date",
				"projection.record_date.range": "NOW-11YEARS,NOW",
				"projection.record_date.format": "yyyy-MM-dd"
			}
		},
		{
			"name": "nodesnapshots",
			"description" : "This table contain snapshots of nodes (Nodes are project, file, folders...). Snapshots are taken when nodes are created, updated or deleted. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp is the time when the snapshot was taken.",
			"columns":[{
				"name": "change_type",
				"type" : "string",
				"comment" : "The type of change that occurred on the node, e.g., CREATE, UPDATE, DELETE."
			},
			{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the change (created/updated/deleted) on the node is pushed to the queue for snapshotting."
			},
			{
				"name": "change_user_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who made the change to the node."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken. (It is usually after the change happened)."
			},
			{
				"name": "id",
				"type" : "bigint",
				"comment" : "The unique identifier of the node."
			},
			{
				"name": "benefactor_id",
				"type" : "bigint",
				"comment" : "The identifier of the (ancestor) node which provides the permissions that apply to this node. Can be the id of the node itself."
			},
			{
				"name": "project_id",
				"type" : "bigint",
				"comment" : "The project where the node resides. It will be empty for the change type DELETE."
			},
			{
				"name": "parent_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the parent in the node hierarchy."
			},
			{
				"name": "node_type",
				"type" : "string",
				"comment" : "The type of the node. Allowed node types are : project, folder, file, table, link, entityview, dockerrepo, submissionview, dataset, datasetcollection, materializedview, virtualtable."
			},
			{
				"name": "created_on",
				"type" : "timestamp",
				"comment" : "The creation time of the node."
			},
			{
				"name": "created_by",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who created the node."
			},
			{
				"name": "modified_on",
				"type" : "timestamp",
				"comment" : "The most recent change time of the node."
			},
			{
				"name": "modified_by",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who last modified the node."
			},
			{
				"name": "version_number",
				"type" : "bigint",
				"comment" : "The version of the node on which the change occurred, if applicable."
			},
			{
				"name": "file_handle_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the file handle if the node is a file, null otherwise."
			},
			{
				"name": "name",
				"type" : "string",
				"comment" : "The name of the node."
			},
			{
				"name": "is_public",
				"type" : "boolean",
				"comment" : "If true, READ permission is granted to all the Synapse users, including the anonymous user, at the time of the snapshot."
			},
			{
				"name": "is_controlled",
				"type" : "boolean",
				"comment" : "If true, an access requirement managed by the ACT is set on the node."
			},
			{
				"name": "is_restricted",
				"type" : "boolean",
				"comment" : "If true, a terms-of-use access requirement is set on the node."
			},
			{
				"name": "effective_ars",
				"type" : "array<bigint>",
				"comment" : "The list of access requirement ids that apply to the entity at the time the snapshot was taken."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp field is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-10YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		},
		{
			"name": "filesnapshots",
			"description" : "This table contain snapshots of file handles. Snapshots are taken when file handles are created, updated or deleted. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",
			"columns":[{
				"name": "change_type",
				"type" : "string",
				"comment" : "The type of change that occurred on the file handle, e.g., CREATE, UPDATE, DELETE."
			},
			{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the change (created/updated/deleted) on the file is pushed to the queue for snapshotting."
			},
			{
				"name": "change_user_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who made the change to the file."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
			},
			{
				"name": "id",
				"type" : "bigint",
				"comment" : "The unique identifier of the file handle."
			},
			{
				"name": "created_by",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who created the file handle."
			},
			{
				"name": "created_on",
				"type" : "timestamp",
				"comment" : "The creation timestamp of the file handle."
			},
			{
				"name": "modified_on",
				"type" : "timestamp",
				"comment" : "The most recent change time of the file handle."
			},
			{
				"name": "concrete_type",
				"type" : "string",
				"comment" : "The type of the file handle. Allowed file handles are: S3FileHandle, ProxyFileHandle, ExternalFileHandle, ExternalObjectStoreFileHandle, GoogleCloudFileHandle."
			},
			{
				"name": "content_md5",
				"type" : "string",
				"comment" : "The md5 hash (using MD5 algorithm) of the file referenced by the file handle."
			},
			{
				"name": "content_type",
				"type" : "string",
				"comment" : "Metadata about the content of the file, e.g., application/json, application/zip, application/octet-stream."
			},
			{
				"name": "file_name",
				"type" : "string",
				"comment" : "The name of the file referenced by the file handle."
			},
			{
				"name": "storage_location_id",
				"type" : "bigint",
				"comment" : "The identifier of the environment, where the physical files are stored."
			},
			{
				"name": "content_size",
				"type" : "bigint",
				"comment" : "The size of the file referenced by the file handle."
			},
			{
				"name": "bucket",
				"type" : "string",
				"comment" : "The bucket where the file is physically stored. Applicable for s3 and GCP, otherwise empty."
			},
			{
				"name": "key",
				"type" : "string",
				"comment" : "The key name uniquely identifies the object (file) in the bucket."
			},
			{
				"name": "preview_id",
				"type" : "bigint",
				"comment" : "The identifier of the file handle that contains a preview of the file referenced by this file handle."
			},
			{
				"name": "is_preview",
				"type" : "boolean",
				"comment" : "If true, the file referenced by this file handle is a preview of another file"
			},
			{
				"name": "status",
				"type" : "string",
				"comment" : "The availability status of the file referenced by the file handle. AVAILABLE:  accessible via Synapse; UNLINKED: not referenced by Synapse and therefore available for garbage collection; ARCHIVED: the file has been garbage collected."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp field is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-10YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		},
		{
			"name": "teamsnapshots",
			"description" : "This table contain snapshots of teams. Snapshots are taken when teams or its members are created or updated. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",

			"columns":[{
				"name": "change_type",
				"type" : "string",
				"comment" : "The type of change that occurred to the team, e.g., CREATE, UPDATE (Snapshotting does not capture DELETE change)."
			},
			{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when any change to the team was made (e.g. create, update or a change to its members)."
			},
			{
				"name": "change_user_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who made the change to the team."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
			},
			{
				"name": "id",
				"type" : "bigint",
				"comment" : "The unique identifier of the team."
			},
			{
				"name": "name",
				"type" : "string",
				"comment" : "The name of the team."
			},
			{
				"name": "can_public_join",
				"type" : "boolean",
				"comment" : "If true, a user can join the team without approval of a team manager."
			},
			{
				"name": "created_on",
				"type" : "timestamp",
				"comment" : "The creation time of the team."
			},
			{
				"name": "created_by",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who created the team."
			},
			{
				"name": "modified_on",
				"type" : "timestamp",
				"comment" : "The time when the team was last modified."
			},
			{
				"name": "modified_by",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who last modified the team."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp field is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-10YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		},
		{
			"name": "teammembersnapshots",
			"description" : "This table contain snapshots of team-members. Snapshots are captured when a team and/or its members are modified. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",
			"columns":[{
				"name": "change_type",
				"type" : "string",
				"comment" : "The type of change that occurred to the member of team, e.g., CREATE, UPDATE (Snapshotting does not capture DELETE change)."
			},
			{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when any change to the team was made (e.g. update of the team or a change to its members)."
			},
			{
				"name": "change_user_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who made the change to the team member."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
			},
			{
				"name": "team_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the team."
			},
			{
				"name": "member_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the member of the team. The member is a Synapse user."
			},
			{
				"name": "is_admin",
				"type" : "boolean",
				"comment" : "If true, then the member is manager of the team."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp field is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-10YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		},
		{
			"name": "usergroupsnapshots",
			"description" : "This table lists all principals (individual users and groups of users). (A group is the low-level object of a underlying team, much like a file handle is the low-level object of an underlying file entity.) In addition to explicit users and teams, principals in Synapse include the anonymous user, the implicit group of all authenticated users, and the implicit public group which includes all users, authenticated or not. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",
			"columns":[{
				"name": "change_type",
				"type" : "string",
				"comment" : "The type of change that occurred to the user-group, e.g., CREATE, UPDATE (Snapshotting does not capture DELETE change)."
			},
			{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the change (creation/update) to the user-group is pushed to the queue for snapshotting."
			},
			{
				"name": "change_user_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who made the change to the user-group."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
			},
			{
				"name": "id",
				"type" : "bigint",
				"comment" : "The unique identifier of user or group."
			},
			{
				"name": "is_individual",
				"type" : "boolean",
				"comment" : "If true, then this user group is an individual user not a team."
			},
			{
				"name": "created_on",
				"type" : "timestamp",
				"comment" : "The creation time of the user-group."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp field is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-10YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		},
		{
			"name": "userprofilesnapshots",
			"description" : "This table contain snapshots of user-profiles. Snapshots are taken when user profiles are created or modified. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",
			"columns":[{
				"name": "change_type",
				"type" : "string",
				"comment" : "The type of change that occurred to the user profile, e.g., CREATE, UPDATE (Snapshotting does not capture DELETE change)."
			},
			{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when any change to the user profile was made (e.g. create or update)."
			},
			{
				"name": "change_user_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who made the change to the user profile."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
			},
			{
				"name": "id",
				"type" : "bigint",
				"comment" : "The unique identifier of the user."
			},
			{
				"name": "user_name",
				"type" : "string",
				"comment" : "The Synapse username."
			},
			{
				"name": "first_name",
				"type" : "string",
				"comment" : "The first name of the user."
			},
			{
				"name": "last_name",
				"type" : "string",
				"comment" : "The last name of the user."
			},
			{
				"name": "email",
				"type" : "string",
				"comment" : "The primary email of the user."
			},
			{
				"name": "location",
				"type" : "string",
				"comment" : "The location of the user."
			},
			{
				"name": "company",
				"type" : "string",
				"comment" : "The company where the user works."
			},
			{
				"name": "position",
				"type" : "string",
				"comment" : "The position of the user in the company."
			},
			{
				"name": "created_on",
				"type" : "timestamp",
				"comment" : "The creation time of the user profile."
			},
			{
				"name": "is_two_factor_auth_enabled",
				"type": "boolean",
				"comment": "Indicates if the user had two factor authentication enabled when the snapshot was captured."
			}
			],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp field is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-10YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		},
		{
			"name": "fileuploadrecords",
			"description" : "The table contains upload records for FileEntity (new file creation/upload or update to the existing file) and TableEntity (append a row set to the existing table, upload file to the existing table). The events are recorded only after the file or change to a table is successfully uploaded.",
			"columns":[{
				"name": "timestamp",
				"type" : "timestamp",
				"comment" : "The time when the upload event is pushed to the queue, after a successful upload of a file or change in the existing table."
			},
			{
				"name": "user_id",
				"type" : "bigint",
				"comment" : "The id of the user who requested the upload."
			},
			{
				"name": "project_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the project where the uploaded entity resides. Applicable only for FileEntity and TableEntity."
			},
			{
				"name": "file_handle_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the file handle."
			},
			{
				"name": "association_object_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the related FileEntity or TableEntity (without the 'syn' prefix)."
			},
			{
				"name": "association_object_type",
				"type" : "string",
				"comment" : "The type of the Synapse object that wraps the file, e.g., FileEntity, TableEntity."
			},
			{
				"name": "stack",
				"type" : "string",
				"comment" : "The stack (prod, dev) on which the upload request was processed."
			},
			{
				"name": "instance",
				"type" : "string",
				"comment" : "The version of the stack that processed the upload request."
			}],
			"partitionKeys":[{
				"name": "record_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The timestamp field is converted into a date and stored in the record_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.record_date.type": "date",
				"projection.record_date.range": "NOW-5YEARS,NOW",
				"projection.record_date.format": "yyyy-MM-dd"
			}
		},
		{
			"name": "filedownloadrecords",
			"description" : "The table contain records of all the downloads of the Synapse, e.g., file, zip/package, attachments. The events are recorded only after the pre-signed url for requested download entity is generated.",
			"columns":[{
				"name": "timestamp",
				"type" : "timestamp",
				"comment" : "The time when the file download event is pushed to the queue for recording, after generating the pre-signed url."
			},
			{
				"name": "user_id",
				"type" : "bigint",
				"comment" : "The id of the user who downloaded the file."
			},
			{
				"name": "project_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the project where the downloaded entity resides. Applicable only for FileEntity and TableEntity."
			},
			{
				"name": "file_handle_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the file handle."
			},
			{
				"name": "downloaded_file_handle_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the zip file handle containing the downloaded file when the download is requested as zip/package, otherwise the id of the file handle itself."
			},
			{
				"name": "association_object_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the Synapse object (without 'syn' prefix) that wraps the file."
			},
			{
				"name": "association_object_type",
				"type" : "string",
				"comment" : "The type of the Synapse object that wraps the file, e.g., FileEntity, TableEntity, WikiAttachment, WikiMarkdown, UserProfileAttachment, MessageAttachment, TeamAttachment."
			},
			{
				"name": "stack",
				"type" : "string",
				"comment" : "The stack (prod, dev) on which the download request was processed."
			},
			{
				"name": "instance",
				"type" : "string",
				"comment" : "The version of the stack that processed the download request."
			},
			{
				"name": "session_id",
				"type" : "string",
				"comment" : "The UUID assigned to the API request that triggered this download.  By joining this table with the processedaccessrecord on session_id, more information about the call that triggered this download can be found."
			}],
			"partitionKeys":[{
				"name": "record_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The timestamp field is converted into a date and stored in the record_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.record_date.type": "date",
				"projection.record_date.range": "NOW-5YEARS,NOW",
				"projection.record_date.format": "yyyy-MM-dd"
			}
		},
		{
			"name": "aclsnapshots",
			"description" : "This table contain snapshots of access-control-list. Snapshots are taken when an acl is created, updated or deleted. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",
			"columns":[{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the change (created/updated/deleted) on an acl is pushed to the queue for snapshotting."
			},
			{
				"name": "change_type",
				"type" : "string",
				"comment" : "The type of change that occurred on the acl, e.g., CREATE, UPDATE, DELETE."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
			},
			{
				"name": "owner_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the Synapse object to which the acl is applied."
			},
			{
				"name": "owner_type",
				"type" : "string",
				"comment" : "The type of the Synapse object that the acl is affecting, .e.g., ENTITY, FILE, SUBMISSION, MESSAGE, TEAM."
			},
			{
				"name": "created_on",
				"type" : "timestamp",
				"comment" : "The creation time of the acl."
			},
			{
				"name": "resource_access",
				"type" : "array<struct<principalId:bigint,accessType:array<string>>>",
				"comment" : "The list of principals (users or teams) along with the permissions the principal is granted on the object to which the acl is applied."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp field is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-6YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		},
		{
			"name": "verificationsubmissionsnapshots",
			"description" : "This table contain snapshots of submissions of user verification data by ACT. Snapshots are taken when a submission is created or updated. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",
			"columns":[{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the change (created/updated) on a submission is pushed to the queue for snapshotting."
			},
			{
				"name": "change_type",
				"type" : "string",
				"comment" : "The type of change that occurred on the submission, e.g., CREATE, UPDATE."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
			},
			{
				"name": "id",
				"type" : "bigint",
				"comment" : "The unique identifier of the submission."
			},
			{
				"name": "created_on",
				"type" : "timestamp",
				"comment" : "The creation time of the submission."
			},
			{
				"name": "created_by",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who, created the submission"
			},
			{
				"name": "state_history",
				"type" : "array<struct<createdOn:bigint,createdBy:string,state:string>>",
				"comment" : "The sequence of submission states (SUBMITTED, REJECTED, APPROVED) for the submission."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp field is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-6YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		},
		{
			"name": "certifiedquizsnapshots",
			"description" : "This table contain snapshots of the certification quiz submitted by a Synapse user. Snapshots are taken when a user submit the quiz. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",
			"columns":[{
				"name": "change_type",
				"type" : "string",
				"comment" : "The change type is always as CREATE since each instance of a user submitting a quiz results in a new submission of the quiz."
			},
			{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the user submitted the quiz."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
			},
			{
				"name": "response_id",
				"type" : "bigint",
				"comment" : "The unique identifier of a response wherein a user submitted a set of answers while participating in the quiz."
			},
			{
				"name": "user_id",
				"type" : "bigint",
				"comment" : "The unique identifier of the user who submitted the quiz."
			},
			{
				"name": "passed",
				"type" : "boolean",
				"comment" : "If true, the user passed the quiz."
			},
			{
				"name": "passed_on",
				"type" : "timestamp",
				"comment" : "The date on which the user submit the quiz, regardless of whether user passed or failed the test."
			},
			{
				"name": "stack",
				"type" : "string",
				"comment" : "The stack (prod, dev) on which the quiz record was processed."
			},
			{
				"name": "instance",
				"type" : "string",
				"comment" : "The version of the stack that processed the quiz record."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp field is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-6YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		},
		{
			"name": "certifiedquizquestionsnapshots",
			"description" : "This table contain snapshots of the questions of the certification quiz. With each entry representing a question answered by the user during the quiz.",
			"columns":[{
				"name": "change_type",
				"type" : "string",
				"comment" : "The change type is always as CREATE since each instance of a user submitting a quiz results in a new submission of the quiz."
			},
			{
				"name": "change_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the user submitted the quiz."
			},
			{
				"name": "change_user_id",
				"type": "bigint",
				"comment": "The unique identifier of the user that submitted the quiz."
			},
			{
				"name": "snapshot_timestamp",
				"type" : "timestamp",
				"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
			},
			{
				"name": "response_id",
				"type" : "bigint",
				"comment" : "The unique identifier of a response wherein a user submitted a set of answers while participating in the quiz."
			},
			{
				"name": "question_index",
				"type" : "bigint",
				"comment" : "The position of the question within the quiz."
			},
			{
				"name": "is_correct",
				"type" : "boolean",
				"comment" : "If true, the answer to the question was correct."
			},
			{
				"name": "stack",
				"type" : "string",
				"comment" : "The stack (prod, dev) on which the quiz question record was processed."
			},
			{
				"name": "instance",
				"type" : "string",
				"comment" : "The version of the stack that processed the quiz question record."
			}],
			"partitionKeys":[{
				"name": "snapshot_date",
				"type" : "date",
				"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp field is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
			}],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-6YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		},
		{
			"name": "accessrequirementsnapshots",
			"description" : "This table contain snapshots of access requirements. Snapshots are taken when an access requirement is created, updated or deleted. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",
			"columns":[
				{
					"name": "change_timestamp",
					"type" : "timestamp",
					"comment" : "The time when the change (created/updated/deleted) on an access requirement is pushed to the queue for snapshotting."
				},
				{
					"name": "change_type",
					"type" : "string",
					"comment" : "The type of change that occurred on the access requirement, e.g., CREATE, UPDATE, DELETE."
				},
				{
					"name": "change_user_id",
					"type": "bigint",
					"comment": "The id of the user that created, updated or deleted the access requirement being snapshotted"
				},
				{
					"name": "snapshot_timestamp",
					"type" : "timestamp",
					"comment" : "The time when the snapshot was taken (It is usually after the change happened)."
				},
				{
					"name": "id",
					"type" : "bigint",
					"comment" : "The unique identifier of the access requirement."
				},
				{
					"name": "version_number",
					"type" : "bigint",
					"comment" : "The version of the access requirement. Each time an access requirement is updated a new version is issued."
				},
				{
					"name": "name",
					"type" : "string",
					"comment" : "The name assigned to the access requirement."
				},
				{
					"name": "description",
					"type" : "string",
					"comment" : "The description assigned to the access requirement."
				},
				{
					"name": "created_by",
					"type" : "bigint",
					"comment" : "The id of the user that created the access requirement."
				},
				{
					"name": "modified_by",
					"type" : "bigint",
					"comment" : "The id of the user that modified the access requirement."
				},
				{
					"name": "created_on",
					"type" : "timestamp",
					"comment" : "The creation time of the access requirement."
				},
				{
					"name": "modified_on",
					"type" : "timestamp",
					"comment" : "The most recent change time of the access requirement."
				},
				{
					"name": "access_type",
					"type" : "string",
					"comment" : "The type of access this access requirement applies to, currently supports only DOWNLOAD (for entities) and PARTICIPATE (for teams)."
				},
				{
					"name": "concrete_type",
					"type" : "string",
					"comment" : "The type of access requirement. See https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/AccessRequirement.html."
				},
				{
					"name": "subjects_defined_by_annotations",
					"type" : "boolean",
					"comment" : "True if the subjects of the access requirement are automatically inferred by derived annotations. If true the subjectIds will be empty."
				},			
				{
					"name": "subjects_ids",
					"type" : "array<struct<id:string,type:string>>",
					"comment" : "The list of objects controlled by this access requirement. If the access_type is DOWNLOAD each element will be an ENTITY, If the access_type is PARTICIPATE each element will be a TEAM. This list is empty if subjects_defined_by_annotations is true."
				},
				{
					"name": "is_certified_user_required",
					"type" : "boolean",
					"comment" : "True if the user certification is required to fulfill the access requirement. Applies only to ManagedACTAccessRequirement and SelfSignAccessRequirement."
				},
				{
					"name": "is_validated_profile_required",
					"type" : "boolean",
					"comment" : "True if the profile validation is required to fulfill the access requirement. Applies only to ManagedACTAccessRequirement and SelfSignAccessRequirement."
				},
				{
					"name": "is_duc_required",
					"type" : "boolean",
					"comment" : "True if a Data Use Certificate (DUC) is required to fulfill the access requirement. Applies only to ManagedACTAccessRequirement."
				},
				{
					"name": "is_irb_approval_required",
					"type" : "boolean",
					"comment" : "True if an Institutional Review Board (IRB) approval document is required to fulfill the access requirement. Applies only to ManagedACTAccessRequirement."
				},
				{
					"name": "are_other_attachments_required",
					"type" : "boolean",
					"comment" : "True if additional attachment(s) are required to fulfill the access requirement. Applies only to ManagedACTAccessRequirement."
				},
				{
					"name": "is_idu_public",
					"type" : "boolean",
					"comment" : "True if the Intended Data Use Statements submitted to gain access to the data will be presented to public. Applies only to ManagedACTAccessRequirement."
				},
				{
					"name": "is_idu_required",
					"type" : "boolean",
					"comment" : "True the Intended Data Use Statement for a research project is required to fulfill the access requirement. Applies only to ManagedACTAccessRequirement."
				},
				{
					"name": "is_two_fa_required",
					"type" : "boolean",
					"comment" : "True if two factor authentication is required to fulfill the access requirement. Applies only to ManagedACTAccessRequirement."
				},
				{
					"name": "duc_template_file_handle_id",
					"type" : "bigint",
					"comment" : "The id of the file handle containing the DUC template (if a DUC is required) that needs to be filled and signed by users to fulfill the access requirement. Applies only to ManagedACTAccessRequirement."
				},
				{
					"name": "expiration_period",
					"type" : "bigint",
					"comment" : "The amount in milliseconds that an approval of this access requirement is valid for. Applies only to ManagedACTAccessRequirement."
				},
				{
					"name": "terms_of_user",
					"type" : "string",
					"comment" : "The terms of use text. Applies only to TermsOfUseAccessRequirement."
				},
				{
					"name": "act_contact_info",
					"type" : "string",
					"comment" : "Information on how to contact the Synapse ACT for access approval (external to Synapse). Applies only to ACTAccessRequirement."
				},
				{
					"name": "open_jira_issue",
					"type" : "boolean",
					"comment" : "Flag that indicate if a JIRA issue needs to be opened in addition to follow the act_contact_info . Applies only to ACTAccessRequirement."
				},
				{
					"name": "jira_key",
					"type" : "string",
					"comment" : "The key of the jira issue created for this Access Requirement. Applies only to LockAccessRequirement."
				}
				],
				"partitionKeys":[{
					"name": "snapshot_date",
					"type" : "date",
					"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp field is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
				}
			],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-6YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		},
		{
			"name": "projectsettingsnapshots",
			"description" : "This table contain snapshots of projects settings. Snapshots are taken when a project setting is created, updated or deleted. Note: Snapshots are also taken periodically and independently of the changes. The snapshot_timestamp records when the snapshot was taken.",
			"columns":[
				{
					"name": "change_timestamp",
					"type" : "timestamp",
					"comment" : "The time when the a project settings change (created/updated/deleted) occured."
				},
				{
					"name": "change_type",
					"type" : "string",
					"comment" : "The type of change that occurred on the access requirement, e.g., CREATE, UPDATE, DELETE."
				},
				{
					"name": "change_user_id",
					"type": "bigint",
					"comment": "The id of the user that created, updated or deleted the project settings being snapshotted"
				},
				{
					"name": "snapshot_timestamp",
					"type" : "timestamp",
					"comment" : "The time when the snapshot was taken. Snapshots are taken after each change event and periodically."
				},
				{
					"name": "id",
					"type" : "bigint",
					"comment" : "The unique identifier of the project setting."
				},
				{
					"name": "concrete_type",
					"type" : "string",
					"comment" : "The type of project setting. See https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/project/ProjectSetting.html."
				},
				{
					"name": "project_id",
					"type" : "bigint",
					"comment" : "The ID of the project to which the settings apply"
				},
				{
					"name": "settings_type",
					"type" : "string",
					"comment" : "The short type of the project settings. See: https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/project/ProjectSettingsType.html"
				},
				{
					"name": "etag",
					"type" : "string",
					"comment" : "UUID issued each time the project settings changes"
				},			
				{
					"name": "locations",
					"type" : "array<bigint>",
					"comment" : "The storage location IDs associated with the project setting."
				}
				],
				"partitionKeys":[{
					"name": "snapshot_date",
					"type" : "date",
					"comment" : "The data is partitioned for fast and cost effective queries. The snapshot_timestamp field is converted into a date and stored in the snapshot_date field for partitioning. The date should be used as a condition (WHERE CLAUSE) in the queries."
				}
			],
			"parameters": {
				"projection.enabled": "true",
				"projection.snapshot_date.type": "date",
				"projection.snapshot_date.range": "NOW-6YEARS,NOW",
				"projection.snapshot_date.format": "yyyy-MM-dd"
			}
		},
		{
			"name": "filesinventory",
			"description" : "This table contains the S3 inventory of the main synapse bucket, the inventory is a snapshot taken weekly. For more information see https://docs.aws.amazon.com/AmazonS3/latest/userguide/storage-inventory.html.",
			"columns":[
				{
					"name": "bucket",
					"type" : "string",
					"comment" : "The object bucket"
				},
				{
					"name": "key",
					"type" : "string",
					"comment" : "The object key name (or key) that uniquely identifies the object in the bucket"
				},
				{
					"name": "version_id",
					"type": "string",
					"comment": "The object version ID"
				},
				{
					"name": "is_latest",
					"type" : "boolean",
					"comment" : "Set to True if the object is the current version of the object"
				},
				{
					"name": "is_delete_marker",
					"type" : "boolean",
					"comment" : "Set to True if the object is a delete marker"
				},
				{
					"name": "size",
					"type" : "bigint",
					"comment" : "The object size in bytes, not including the size of incomplete multipart uploads, object metadata, and delete markers"
				},
				{
					"name": "last_modified_date",
					"type" : "timestamp",
					"comment" : "The object creation date or the last modified date, whichever is the latest."
				},
				{
					"name": "e_tag",
					"type" : "string",
					"comment" : "The entity tag (ETag) is a hash of the object. The ETag reflects changes only to the contents of an object, not to its metadata. The ETag can be an MD5 digest of the object data. Whether it is depends on how the object was created and how it is encrypted."
				},
				{
					"name": "storage_class",
					"type" : "string",
					"comment" : "The storage class that's used for storing the object. See https://docs.aws.amazon.com/AmazonS3/latest/userguide/storage-class-intro.html"
				},			
				{
					"name": "intelligent_tiering_access_tier",
					"type" : "string",
					"comment" : "Access tier (frequent or infrequent) of the object if it is stored in the S3 Intelligent-Tiering storage class. See https://docs.aws.amazon.com/AmazonS3/latest/userguide/storage-class-intro.html#sc-dynamic-data-access"
				},
				{
					"name": "is_multipart_uploaded",
					"type" : "boolean",
					"comment" : "Set to True if the object was uploaded as a multipart upload"
				}],
				"partitionKeys":[{
					"name": "dt",
					"type" : "string",
					"comment" : "An inventory snapshot is taken on a weekly cadence, the data is partitioned by the snapshot date"
				}
			],
			"inputFormat": "org.apache.hadoop.hive.ql.io.SymlinkTextInputFormat",
			"location": "s3://${stack}.datawarehouse.sagebase.org/warehouse/inventory/${stack}data.sagebase.org/defaultInventory/hive/",
			"parameters": {
				"projection.enabled": "true",
				"projection.dt.type": "date",
				"projection.dt.format": "yyyy-MM-dd-HH-mm",
				"projection.dt.range": "2023-01-01-00-00,NOW",
				"projection.dt.interval": "1",
				"projection.dt.interval.unit": "HOURS"
			}
		}
	],
	"etlJobDescriptors":[{
			"name": "processaccessrecord",
			"description": "This job processes the access records",
			"scriptName": "process_access_record.py",
			"sourcePath" : "log.sagebase.org/accessRecord/records/",
			"targetTable": "processedaccessrecord"
		},
		{
			"name": "nodesnapshots",
			"description": "This job processes the node snapshot data",
			"scriptName": "node_snapshots.py",
			"sourcePath" : "log.sagebase.org/nodeSnapshots/records/",
			"targetTable": "nodesnapshots"
		},
		{
			"name": "filesnapshots",
			"description": "This job processes the file snapshot data",
			"scriptName": "file_snapshots.py",
			"sourcePath" : "log.sagebase.org/fileSnapshots/records/",
			"targetTable": "filesnapshots"
		},
		{
			"name": "teamsnapshots",
			"description": "This job processes the team snapshot data",
			"scriptName": "team_snapshots.py",
			"sourcePath" : "log.sagebase.org/teamSnapshots/records/",
			"targetTable": "teamsnapshots"
		},
		{
			"name": "teammembersnapshots",
			"description": "This job processes the team member snapshot data",
			"scriptName": "team_member_snapshots.py",
			"sourcePath" : "log.sagebase.org/teamMemberSnapshots/records/",
			"targetTable": "teammembersnapshots"
		},
		{
			"name": "usergroupsnapshots",
			"description": "This job processes the user group snapshot data",
			"scriptName": "user_group_snapshots.py",
			"sourcePath" : "log.sagebase.org/userGroupSnapshots/records/",
			"targetTable": "usergroupsnapshots"
		},
		{
			"name": "userprofilesnapshots",
			"description": "This job processes the user profile snapshot data",
			"scriptName": "user_profile_snapshots.py",
			"sourcePath" : "log.sagebase.org/userProfileSnapshots/records/",
			"targetTable": "userprofilesnapshots"
		},
		{
			"name": "fileuploadrecords",
			"description": "This job processes the file upload records",
			"scriptName": "file_upload_records.py",
			"sourcePath" : "log.sagebase.org/fileUploadRecords/records/",
			"targetTable": "fileuploadrecords"
		},
		{
			"name": "filedownloadrecords",
			"description": "This job processes the file download records",
			"scriptName": "file_download_records.py",
			"sourcePath" : "log.sagebase.org/fileDownloadRecords/records/",
			"targetTable": "filedownloadrecords"
		},
		{
			"name": "aclsnapshots",
			"description": "This job processes the acl snapshot data",
			"scriptName": "acl_snapshots.py",
			"sourcePath" : "log.sagebase.org/aclSnapshots/records/",
			"targetTable": "aclsnapshots"
		},
		{
			"name": "verificationsubmissionsnapshots",
			"description": "This job processes the verification submission snapshot data",
			"scriptName": "verification_submission_snapshots.py",
			"sourcePath" : "log.sagebase.org/verificationSubmissionSnapshots/records/",
			"targetTable": "verificationsubmissionsnapshots"
		},
		{
			"name": "certifiedquizSnapshots",
			"description": "This job processes the user's certified quiz snapshots",
			"scriptName": "certified_quiz_snapshots.py",
			"sourcePath" : "log.sagebase.org/certifiedUserPassingSnapshots/records/",
			"targetTable": "certifiedquizsnapshots"
		},
		{
			"name": "certifiedquizquestionsnapshots",
			"description": "This job processes the user's certified quiz question snapshots",
			"scriptName": "certified_quiz_question_snapshots.py",
			"sourcePath" : "log.sagebase.org/certifiedUserPassingSnapshots/records/",
			"targetTable": "certifiedquizquestionsnapshots"
		},
		{
			"name": "accessrequirementsnapshots",
			"description": "This job processes the access requirement snapshot data",
			"scriptName": "access_requirement_snapshot.py",
			"sourcePath" : "log.sagebase.org/accessRequirementSnapshots/records/",
			"targetTable": "accessrequirementsnapshots"
		},
		{
			"name": "projectsettingsnapshots",
			"description": "This job processes the project setting data",
			"scriptName": "project_settings_snapshots.py",
			"sourcePath" : "log.sagebase.org/projectSettingSnapshots/records/",
			"targetTable": "projectsettingsnapshots"
		}
	]
}